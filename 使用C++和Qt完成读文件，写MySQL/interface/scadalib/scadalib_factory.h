/*********************************************************
 * scadalib_factory.h
 * contents: builder, interface for creating objects
 * date: 2009-09-23 code generated by scadalib_gen(hongkeqin@xjgc.com)
 *********************************************************/

#ifndef SCADALIB_FACTORY_H_
#define SCADALIB_FACTORY_H_

#include "../icsunknown.h"
#include "./scadalib_typedef.h"
#include "./scadalib_intf.h"

//forward declarations
class Iabrupttype;
class Iaccumcalmap;
class Iaccumulator;
class Iaccumulsrc;
class Iacperiodstat;
class Iacurvelimit;
class Ialarm;
class Ialarmclass;
class Ialarmemail;
class Ialarmgroup;
class Ialarmlevel;
class Ialarmpara;
class Ialarmphone;
class Ialimittype;
class Ialmgrptype;
class Ianalog;
class Ianalogcalmap;
class Ianalogsrc;
class Ianalogstat;
class Ianalprdlmt;
class Iaperiodstat;
class Iapp;
class Ibay;
class Ibayarea;
class Ibaytype;
class Icalvaluetype;
class Icontrol;
class Icsfcommsrc;
class Ictrlexp;
class Ictrlvaltype;
class Ictrlworddef;
class Idataclass;
class Idistrict;
class Iequipclass;
class Iequipment;
class Iequiptype;
class Iexprcal;
class Ifamily;
class Imeasclass;
class Imeastype;
class Imeasunit;
class Imsgemail;
class Imsgphone;
class Iperiod;
class Iperiodtype;
class Isetting;
class Isettingarea;
class Isettingenum;
class Isoe;
class Isperiodstat;
class Istation;
class Istationarea;
class Istationtype;
class Istatus;
class Istatuscalmap;
class Istatussrc;
class Istatusstat;
class Istvaltype;
class Itagtype;
class Itimertype;
class Itopoconnnode;
class Itopoequip;
class Itopoisland;
class Itopoline;
class Itoponode;
class Itoposystem;
class Itopoterminal;
class Ivoltage;

/*
 * Scada业务对象工厂接口：用于创建相关对象实例
 * 使用注意事项：
		1. 不要使用同一个IScadaObjFactory创建两个同类的业务对象同时使用，
		先前创建的对象会被后面创建的对象覆写。例如，不要这样使用：
		"	IScadaObjFactory* pFac= ...;
			Iabrupttype* p1 = pFac->Loadabrupttype(1);
			Iabrupttype* p2 = pFac->Loadabrupttype(2);
			//...do some work
			p1->Release();
			p2->Release();
			pFac->Release();
		"
		以上代码中，当p2被创建时，p1所指向的内容会被更改(p1与p2指向同一数据库记录)
		2. 若要同时使用两个同类的业务对象，可通过两个不同的IScadaObjFactory*对象来创建。
		例如，可以这样使用：
		"	IScadaObjFactory* pFac1= ...;
			IScadaObjFactory* pFac2 = pFac1->NewFactory();
			Iabrupttype* p1 = pFac1->Loadabrupttype(1);
			Iabrupttype* p2 = pFac2->Loadabrupttype(2);
			//...do some work
			p1->Release();
			p2->Release();
			pFac1->Release();
			pFac2->Release();
		"
		3. 同一个IScadaObjFactory创建的两个不同类业务对象可以同时使用。例如：
		"	IScadaObjFactory* pFac= ...;
			Iabrupttype* pAbruptType = pFac->Loadabrupttype(1);
			Icontrol* pCtrl = pFac->Loadcontrol(1);
			//...do some work
			pCtrl->Release();
			pAbruptType->Release();
			pFac->Release();
		"
 */
class IScadaObjFactory : public IICSUnknown
{
public:
	//Is RTDB connected successfully
	virtual bool RTDBConnected() = 0;

	//explicitly Reset inner state
	virtual void Reset() = 0;

	//Refresh RTDB
	virtual bool RefreshRTDB() = 0;

	//generate an empty factory
	virtual IScadaObjFactory* NewFactory() = 0;

	//get abrupttype instance by id
	virtual Iabrupttype* Loadabrupttype(int id) = 0;

	//get abrupttype(s)
	virtual Iabrupttype* LoadabrupttypeSet(string_type query) = 0;

	//get accumcalmap instance by id
	virtual Iaccumcalmap* Loadaccumcalmap(int id) = 0;

	//get accumcalmap(s)
	virtual Iaccumcalmap* LoadaccumcalmapSet(string_type query) = 0;

	//get accumulator instance by id
	virtual Iaccumulator* Loadaccumulator(int id) = 0;

	//get accumulator(s)
	virtual Iaccumulator* LoadaccumulatorSet(string_type query) = 0;

	//get accumulsrc instance by id
	virtual Iaccumulsrc* Loadaccumulsrc(int id) = 0;

	//get accumulsrc(s)
	virtual Iaccumulsrc* LoadaccumulsrcSet(string_type query) = 0;

	//get acperiodstat instance by id
	virtual Iacperiodstat* Loadacperiodstat(int id) = 0;

	//get acperiodstat(s)
	virtual Iacperiodstat* LoadacperiodstatSet(string_type query) = 0;

	//get acurvelimit instance by id
	virtual Iacurvelimit* Loadacurvelimit(int id) = 0;

	//get acurvelimit(s)
	virtual Iacurvelimit* LoadacurvelimitSet(string_type query) = 0;

	//get alarm instance by id
	virtual Ialarm* Loadalarm(int id) = 0;

	//get alarm(s)
	virtual Ialarm* LoadalarmSet(string_type query) = 0;

	//get alarmclass instance by id
	virtual Ialarmclass* Loadalarmclass(int id) = 0;

	//get alarmclass(s)
	virtual Ialarmclass* LoadalarmclassSet(string_type query) = 0;

	//get alarmemail instance by id
	virtual Ialarmemail* Loadalarmemail(int id) = 0;

	//get alarmemail(s)
	virtual Ialarmemail* LoadalarmemailSet(string_type query) = 0;

	//get alarmgroup instance by id
	virtual Ialarmgroup* Loadalarmgroup(int id) = 0;

	//get alarmgroup(s)
	virtual Ialarmgroup* LoadalarmgroupSet(string_type query) = 0;

	//get alarmlevel instance by id
	virtual Ialarmlevel* Loadalarmlevel(int id) = 0;

	//get alarmlevel(s)
	virtual Ialarmlevel* LoadalarmlevelSet(string_type query) = 0;

	//get alarmpara instance by id
	virtual Ialarmpara* Loadalarmpara(int id) = 0;

	//get alarmpara(s)
	virtual Ialarmpara* LoadalarmparaSet(string_type query) = 0;

	//get alarmphone instance by id
	virtual Ialarmphone* Loadalarmphone(int id) = 0;

	//get alarmphone(s)
	virtual Ialarmphone* LoadalarmphoneSet(string_type query) = 0;

	//get alimittype instance by id
	virtual Ialimittype* Loadalimittype(int id) = 0;

	//get alimittype(s)
	virtual Ialimittype* LoadalimittypeSet(string_type query) = 0;

	//get almgrptype instance by id
	virtual Ialmgrptype* Loadalmgrptype(int id) = 0;

	//get almgrptype(s)
	virtual Ialmgrptype* LoadalmgrptypeSet(string_type query) = 0;

	//get analog instance by id
	virtual Ianalog* Loadanalog(int id) = 0;

	//get analog(s)
	virtual Ianalog* LoadanalogSet(string_type query) = 0;

	//get analogcalmap instance by id
	virtual Ianalogcalmap* Loadanalogcalmap(int id) = 0;

	//get analogcalmap(s)
	virtual Ianalogcalmap* LoadanalogcalmapSet(string_type query) = 0;

	//get analogsrc instance by id
	virtual Ianalogsrc* Loadanalogsrc(int id) = 0;

	//get analogsrc(s)
	virtual Ianalogsrc* LoadanalogsrcSet(string_type query) = 0;

	//get analogstat instance by id
	virtual Ianalogstat* Loadanalogstat(int id) = 0;

	//get analogstat(s)
	virtual Ianalogstat* LoadanalogstatSet(string_type query) = 0;

	//get analprdlmt instance by id
	virtual Ianalprdlmt* Loadanalprdlmt(int id) = 0;

	//get analprdlmt(s)
	virtual Ianalprdlmt* LoadanalprdlmtSet(string_type query) = 0;

	//get aperiodstat instance by id
	virtual Iaperiodstat* Loadaperiodstat(int id) = 0;

	//get aperiodstat(s)
	virtual Iaperiodstat* LoadaperiodstatSet(string_type query) = 0;

	//get app instance by id
	virtual Iapp* Loadapp(int id) = 0;

	//get app(s)
	virtual Iapp* LoadappSet(string_type query) = 0;

	//get bay instance by id
	virtual Ibay* Loadbay(int id) = 0;

	//get bay(s)
	virtual Ibay* LoadbaySet(string_type query) = 0;

	//get bayarea instance by id
	virtual Ibayarea* Loadbayarea(int id) = 0;

	//get bayarea(s)
	virtual Ibayarea* LoadbayareaSet(string_type query) = 0;

	//get baytype instance by id
	virtual Ibaytype* Loadbaytype(int id) = 0;

	//get baytype(s)
	virtual Ibaytype* LoadbaytypeSet(string_type query) = 0;

	//get calvaluetype instance by id
	virtual Icalvaluetype* Loadcalvaluetype(int id) = 0;

	//get calvaluetype(s)
	virtual Icalvaluetype* LoadcalvaluetypeSet(string_type query) = 0;

	//get control instance by id
	virtual Icontrol* Loadcontrol(int id) = 0;

	//get control(s)
	virtual Icontrol* LoadcontrolSet(string_type query) = 0;

	//get csfcommsrc instance by id
	virtual Icsfcommsrc* Loadcsfcommsrc(int id) = 0;

	//get csfcommsrc(s)
	virtual Icsfcommsrc* LoadcsfcommsrcSet(string_type query) = 0;

	//get ctrlexp instance by id
	virtual Ictrlexp* Loadctrlexp(int id) = 0;

	//get ctrlexp(s)
	virtual Ictrlexp* LoadctrlexpSet(string_type query) = 0;

	//get ctrlvaltype instance by id
	virtual Ictrlvaltype* Loadctrlvaltype(int id) = 0;

	//get ctrlvaltype(s)
	virtual Ictrlvaltype* LoadctrlvaltypeSet(string_type query) = 0;

	//get ctrlworddef instance by id
	virtual Ictrlworddef* Loadctrlworddef(int id) = 0;

	//get ctrlworddef(s)
	virtual Ictrlworddef* LoadctrlworddefSet(string_type query) = 0;

	//get dataclass instance by id
	virtual Idataclass* Loaddataclass(int id) = 0;

	//get dataclass(s)
	virtual Idataclass* LoaddataclassSet(string_type query) = 0;

	//get district instance by id
	virtual Idistrict* Loaddistrict(int id) = 0;

	//get district(s)
	virtual Idistrict* LoaddistrictSet(string_type query) = 0;

	//get equipclass instance by id
	virtual Iequipclass* Loadequipclass(int id) = 0;

	//get equipclass(s)
	virtual Iequipclass* LoadequipclassSet(string_type query) = 0;

	//get equipment instance by id
	virtual Iequipment* Loadequipment(int id) = 0;

	//get equipment(s)
	virtual Iequipment* LoadequipmentSet(string_type query) = 0;

	//get equiptype instance by id
	virtual Iequiptype* Loadequiptype(int id) = 0;

	//get equiptype(s)
	virtual Iequiptype* LoadequiptypeSet(string_type query) = 0;

	//get exprcal instance by id
	virtual Iexprcal* Loadexprcal(int id) = 0;

	//get exprcal(s)
	virtual Iexprcal* LoadexprcalSet(string_type query) = 0;

	//get family instance by id
	virtual Ifamily* Loadfamily(int id) = 0;

	//get family(s)
	virtual Ifamily* LoadfamilySet(string_type query) = 0;

	//get measclass instance by id
	virtual Imeasclass* Loadmeasclass(int id) = 0;

	//get measclass(s)
	virtual Imeasclass* LoadmeasclassSet(string_type query) = 0;

	//get meastype instance by id
	virtual Imeastype* Loadmeastype(int id) = 0;

	//get meastype(s)
	virtual Imeastype* LoadmeastypeSet(string_type query) = 0;

	//get measunit instance by id
	virtual Imeasunit* Loadmeasunit(int id) = 0;

	//get measunit(s)
	virtual Imeasunit* LoadmeasunitSet(string_type query) = 0;

	//get msgemail instance by id
	virtual Imsgemail* Loadmsgemail(int id) = 0;

	//get msgemail(s)
	virtual Imsgemail* LoadmsgemailSet(string_type query) = 0;

	//get msgphone instance by id
	virtual Imsgphone* Loadmsgphone(int id) = 0;

	//get msgphone(s)
	virtual Imsgphone* LoadmsgphoneSet(string_type query) = 0;

	//get period instance by id
	virtual Iperiod* Loadperiod(int id) = 0;

	//get period(s)
	virtual Iperiod* LoadperiodSet(string_type query) = 0;

	//get periodtype instance by id
	virtual Iperiodtype* Loadperiodtype(int id) = 0;

	//get periodtype(s)
	virtual Iperiodtype* LoadperiodtypeSet(string_type query) = 0;

	//get setting instance by id
	virtual Isetting* Loadsetting(int id) = 0;

	//get setting(s)
	virtual Isetting* LoadsettingSet(string_type query) = 0;

	//get settingarea instance by id
	virtual Isettingarea* Loadsettingarea(int id) = 0;

	//get settingarea(s)
	virtual Isettingarea* LoadsettingareaSet(string_type query) = 0;

	//get settingenum instance by id
	virtual Isettingenum* Loadsettingenum(int id) = 0;

	//get settingenum(s)
	virtual Isettingenum* LoadsettingenumSet(string_type query) = 0;

	//get soe instance by id
	virtual Isoe* Loadsoe(int id) = 0;

	//get soe(s)
	virtual Isoe* LoadsoeSet(string_type query) = 0;

	//get speriodstat instance by id
	virtual Isperiodstat* Loadsperiodstat(int id) = 0;

	//get speriodstat(s)
	virtual Isperiodstat* LoadsperiodstatSet(string_type query) = 0;

	//get station instance by id
	virtual Istation* Loadstation(int id) = 0;

	//get station(s)
	virtual Istation* LoadstationSet(string_type query) = 0;

	//get stationarea instance by id
	virtual Istationarea* Loadstationarea(int id) = 0;

	//get stationarea(s)
	virtual Istationarea* LoadstationareaSet(string_type query) = 0;

	//get stationtype instance by id
	virtual Istationtype* Loadstationtype(int id) = 0;

	//get stationtype(s)
	virtual Istationtype* LoadstationtypeSet(string_type query) = 0;

	//get status instance by id
	virtual Istatus* Loadstatus(int id) = 0;

	//get status(s)
	virtual Istatus* LoadstatusSet(string_type query) = 0;

	//get statuscalmap instance by id
	virtual Istatuscalmap* Loadstatuscalmap(int id) = 0;

	//get statuscalmap(s)
	virtual Istatuscalmap* LoadstatuscalmapSet(string_type query) = 0;

	//get statussrc instance by id
	virtual Istatussrc* Loadstatussrc(int id) = 0;

	//get statussrc(s)
	virtual Istatussrc* LoadstatussrcSet(string_type query) = 0;

	//get statusstat instance by id
	virtual Istatusstat* Loadstatusstat(int id) = 0;

	//get statusstat(s)
	virtual Istatusstat* LoadstatusstatSet(string_type query) = 0;

	//get stvaltype instance by id
	virtual Istvaltype* Loadstvaltype(int id) = 0;

	//get stvaltype(s)
	virtual Istvaltype* LoadstvaltypeSet(string_type query) = 0;

	//get tagtype instance by id
	virtual Itagtype* Loadtagtype(int id) = 0;

	//get tagtype(s)
	virtual Itagtype* LoadtagtypeSet(string_type query) = 0;

	//get timertype instance by id
	virtual Itimertype* Loadtimertype(int id) = 0;

	//get timertype(s)
	virtual Itimertype* LoadtimertypeSet(string_type query) = 0;

	//get topoconnnode instance by id
	virtual Itopoconnnode* Loadtopoconnnode(int id) = 0;

	//get topoconnnode(s)
	virtual Itopoconnnode* LoadtopoconnnodeSet(string_type query) = 0;

	//get topoequip instance by id
	virtual Itopoequip* Loadtopoequip(int id) = 0;

	//get topoequip(s)
	virtual Itopoequip* LoadtopoequipSet(string_type query) = 0;

	//get topoisland instance by id
	virtual Itopoisland* Loadtopoisland(int id) = 0;

	//get topoisland(s)
	virtual Itopoisland* LoadtopoislandSet(string_type query) = 0;

	//get topoline instance by id
	virtual Itopoline* Loadtopoline(int id) = 0;

	//get topoline(s)
	virtual Itopoline* LoadtopolineSet(string_type query) = 0;

	//get toponode instance by id
	virtual Itoponode* Loadtoponode(int id) = 0;

	//get toponode(s)
	virtual Itoponode* LoadtoponodeSet(string_type query) = 0;

	//get toposystem instance by id
	virtual Itoposystem* Loadtoposystem(int id) = 0;

	//get toposystem(s)
	virtual Itoposystem* LoadtoposystemSet(string_type query) = 0;

	//get topoterminal instance by id
	virtual Itopoterminal* Loadtopoterminal(int id) = 0;

	//get topoterminal(s)
	virtual Itopoterminal* LoadtopoterminalSet(string_type query) = 0;

	//get voltage instance by id
	virtual Ivoltage* Loadvoltage(int id) = 0;

	//get voltage(s)
	virtual Ivoltage* LoadvoltageSet(string_type query) = 0;


};

#endif