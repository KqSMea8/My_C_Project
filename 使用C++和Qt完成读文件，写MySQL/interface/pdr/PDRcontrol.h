// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `PDRcontrol.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __PDRcontrol_h__
#define __PDRcontrol_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace modulePDR
{

class PDRcontrol;

}

}

namespace modulePDR
{

class PDRcontrol;
bool operator==(const PDRcontrol&, const PDRcontrol&);
bool operator<(const PDRcontrol&, const PDRcontrol&);

}

namespace IceInternal
{

::Ice::Object* upCast(::modulePDR::PDRcontrol*);
::IceProxy::Ice::Object* upCast(::IceProxy::modulePDR::PDRcontrol*);

}

namespace modulePDR
{

typedef ::IceInternal::Handle< ::modulePDR::PDRcontrol> PDRcontrolPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::modulePDR::PDRcontrol> PDRcontrolPrx;

void __read(::IceInternal::BasicStream*, PDRcontrolPrx&);
void __patch__PDRcontrolPtr(void*, ::Ice::ObjectPtr&);

}

namespace modulePDR
{

struct PDRApplyObj
{
    ::std::string equipObj;
    ::std::string faultTime;
    ::Ice::Double startTime;
    ::Ice::Double endTime;
    ::Ice::Int startFrame;
    ::Ice::Int endFrame;
    ::std::string stationName;
    ::std::string feederName;
    ::std::string clientName;
    ::Ice::Int playspeed;
    ::Ice::Int interval;

    bool operator==(const PDRApplyObj& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(equipObj != __rhs.equipObj)
        {
            return false;
        }
        if(faultTime != __rhs.faultTime)
        {
            return false;
        }
        if(startTime != __rhs.startTime)
        {
            return false;
        }
        if(endTime != __rhs.endTime)
        {
            return false;
        }
        if(startFrame != __rhs.startFrame)
        {
            return false;
        }
        if(endFrame != __rhs.endFrame)
        {
            return false;
        }
        if(stationName != __rhs.stationName)
        {
            return false;
        }
        if(feederName != __rhs.feederName)
        {
            return false;
        }
        if(clientName != __rhs.clientName)
        {
            return false;
        }
        if(playspeed != __rhs.playspeed)
        {
            return false;
        }
        if(interval != __rhs.interval)
        {
            return false;
        }
        return true;
    }

    bool operator<(const PDRApplyObj& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(equipObj < __rhs.equipObj)
        {
            return true;
        }
        else if(__rhs.equipObj < equipObj)
        {
            return false;
        }
        if(faultTime < __rhs.faultTime)
        {
            return true;
        }
        else if(__rhs.faultTime < faultTime)
        {
            return false;
        }
        if(startTime < __rhs.startTime)
        {
            return true;
        }
        else if(__rhs.startTime < startTime)
        {
            return false;
        }
        if(endTime < __rhs.endTime)
        {
            return true;
        }
        else if(__rhs.endTime < endTime)
        {
            return false;
        }
        if(startFrame < __rhs.startFrame)
        {
            return true;
        }
        else if(__rhs.startFrame < startFrame)
        {
            return false;
        }
        if(endFrame < __rhs.endFrame)
        {
            return true;
        }
        else if(__rhs.endFrame < endFrame)
        {
            return false;
        }
        if(stationName < __rhs.stationName)
        {
            return true;
        }
        else if(__rhs.stationName < stationName)
        {
            return false;
        }
        if(feederName < __rhs.feederName)
        {
            return true;
        }
        else if(__rhs.feederName < feederName)
        {
            return false;
        }
        if(clientName < __rhs.clientName)
        {
            return true;
        }
        else if(__rhs.clientName < clientName)
        {
            return false;
        }
        if(playspeed < __rhs.playspeed)
        {
            return true;
        }
        else if(__rhs.playspeed < playspeed)
        {
            return false;
        }
        if(interval < __rhs.interval)
        {
            return true;
        }
        else if(__rhs.interval < interval)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const PDRApplyObj& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const PDRApplyObj& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const PDRApplyObj& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const PDRApplyObj& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

struct analogTMeasValue
{
    ::Ice::Double dtUpdateTime;
    ::Ice::Double dtDataTime;
    ::Ice::Double dRawValue;
    ::Ice::Double dCalValue;
    ::Ice::Int nQuality;

    bool operator==(const analogTMeasValue& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(dtUpdateTime != __rhs.dtUpdateTime)
        {
            return false;
        }
        if(dtDataTime != __rhs.dtDataTime)
        {
            return false;
        }
        if(dRawValue != __rhs.dRawValue)
        {
            return false;
        }
        if(dCalValue != __rhs.dCalValue)
        {
            return false;
        }
        if(nQuality != __rhs.nQuality)
        {
            return false;
        }
        return true;
    }

    bool operator<(const analogTMeasValue& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(dtUpdateTime < __rhs.dtUpdateTime)
        {
            return true;
        }
        else if(__rhs.dtUpdateTime < dtUpdateTime)
        {
            return false;
        }
        if(dtDataTime < __rhs.dtDataTime)
        {
            return true;
        }
        else if(__rhs.dtDataTime < dtDataTime)
        {
            return false;
        }
        if(dRawValue < __rhs.dRawValue)
        {
            return true;
        }
        else if(__rhs.dRawValue < dRawValue)
        {
            return false;
        }
        if(dCalValue < __rhs.dCalValue)
        {
            return true;
        }
        else if(__rhs.dCalValue < dCalValue)
        {
            return false;
        }
        if(nQuality < __rhs.nQuality)
        {
            return true;
        }
        else if(__rhs.nQuality < nQuality)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const analogTMeasValue& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const analogTMeasValue& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const analogTMeasValue& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const analogTMeasValue& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

struct hisalarmInfo
{
    ::Ice::Int objid;
    ::Ice::Int alarmid;
    ::std::string objtype;
    ::Ice::Double thetime;
    ::std::string description;
    ::std::string report;
    ::std::string actuser;
    ::Ice::Double confirmtime;
    ::std::string objdesc;
    ::std::string thetimestr;

    bool operator==(const hisalarmInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(objid != __rhs.objid)
        {
            return false;
        }
        if(alarmid != __rhs.alarmid)
        {
            return false;
        }
        if(objtype != __rhs.objtype)
        {
            return false;
        }
        if(thetime != __rhs.thetime)
        {
            return false;
        }
        if(description != __rhs.description)
        {
            return false;
        }
        if(report != __rhs.report)
        {
            return false;
        }
        if(actuser != __rhs.actuser)
        {
            return false;
        }
        if(confirmtime != __rhs.confirmtime)
        {
            return false;
        }
        if(objdesc != __rhs.objdesc)
        {
            return false;
        }
        if(thetimestr != __rhs.thetimestr)
        {
            return false;
        }
        return true;
    }

    bool operator<(const hisalarmInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(objid < __rhs.objid)
        {
            return true;
        }
        else if(__rhs.objid < objid)
        {
            return false;
        }
        if(alarmid < __rhs.alarmid)
        {
            return true;
        }
        else if(__rhs.alarmid < alarmid)
        {
            return false;
        }
        if(objtype < __rhs.objtype)
        {
            return true;
        }
        else if(__rhs.objtype < objtype)
        {
            return false;
        }
        if(thetime < __rhs.thetime)
        {
            return true;
        }
        else if(__rhs.thetime < thetime)
        {
            return false;
        }
        if(description < __rhs.description)
        {
            return true;
        }
        else if(__rhs.description < description)
        {
            return false;
        }
        if(report < __rhs.report)
        {
            return true;
        }
        else if(__rhs.report < report)
        {
            return false;
        }
        if(actuser < __rhs.actuser)
        {
            return true;
        }
        else if(__rhs.actuser < actuser)
        {
            return false;
        }
        if(confirmtime < __rhs.confirmtime)
        {
            return true;
        }
        else if(__rhs.confirmtime < confirmtime)
        {
            return false;
        }
        if(objdesc < __rhs.objdesc)
        {
            return true;
        }
        else if(__rhs.objdesc < objdesc)
        {
            return false;
        }
        if(thetimestr < __rhs.thetimestr)
        {
            return true;
        }
        else if(__rhs.thetimestr < thetimestr)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const hisalarmInfo& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const hisalarmInfo& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const hisalarmInfo& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const hisalarmInfo& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

typedef ::std::vector< ::modulePDR::analogTMeasValue> AnalogValueSequence;
void __writeAnalogValueSequence(::IceInternal::BasicStream*, const ::modulePDR::analogTMeasValue*, const ::modulePDR::analogTMeasValue*);
void __readAnalogValueSequence(::IceInternal::BasicStream*, AnalogValueSequence&);

typedef ::std::vector< ::modulePDR::hisalarmInfo> AlarmInfoSequence;
void __writeAlarmInfoSequence(::IceInternal::BasicStream*, const ::modulePDR::hisalarmInfo*, const ::modulePDR::hisalarmInfo*);
void __readAlarmInfoSequence(::IceInternal::BasicStream*, AlarmInfoSequence&);

}

namespace modulePDR
{

class Callback_PDRcontrol_getplaybackhandler_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PDRcontrol_getplaybackhandler_Base> Callback_PDRcontrol_getplaybackhandlerPtr;

class Callback_PDRcontrol_jointheplayback_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PDRcontrol_jointheplayback_Base> Callback_PDRcontrol_jointheplaybackPtr;

class Callback_PDRcontrol_play_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PDRcontrol_play_Base> Callback_PDRcontrol_playPtr;

class Callback_PDRcontrol_pause_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PDRcontrol_pause_Base> Callback_PDRcontrol_pausePtr;

class Callback_PDRcontrol_stop_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PDRcontrol_stop_Base> Callback_PDRcontrol_stopPtr;

class Callback_PDRcontrol_PreviousFrame_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PDRcontrol_PreviousFrame_Base> Callback_PDRcontrol_PreviousFramePtr;

class Callback_PDRcontrol_LatterFrame_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PDRcontrol_LatterFrame_Base> Callback_PDRcontrol_LatterFramePtr;

class Callback_PDRcontrol_SetFrame_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PDRcontrol_SetFrame_Base> Callback_PDRcontrol_SetFramePtr;

class Callback_PDRcontrol_setplayspeed_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PDRcontrol_setplayspeed_Base> Callback_PDRcontrol_setplayspeedPtr;

class Callback_PDRcontrol_getInitstatus_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PDRcontrol_getInitstatus_Base> Callback_PDRcontrol_getInitstatusPtr;

class Callback_PDRcontrol_getplayframe_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PDRcontrol_getplayframe_Base> Callback_PDRcontrol_getplayframePtr;

class Callback_PDRcontrol_getplayingclientlist_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PDRcontrol_getplayingclientlist_Base> Callback_PDRcontrol_getplayingclientlistPtr;

class Callback_PDRcontrol_getplayingequipObj_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PDRcontrol_getplayingequipObj_Base> Callback_PDRcontrol_getplayingequipObjPtr;

class Callback_PDRcontrol_getplayingfaultTime_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PDRcontrol_getplayingfaultTime_Base> Callback_PDRcontrol_getplayingfaultTimePtr;

class Callback_PDRcontrol_connectCheck_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PDRcontrol_connectCheck_Base> Callback_PDRcontrol_connectCheckPtr;

class Callback_PDRcontrol_getanalogValue_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PDRcontrol_getanalogValue_Base> Callback_PDRcontrol_getanalogValuePtr;

class Callback_PDRcontrol_getalarminfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PDRcontrol_getalarminfo_Base> Callback_PDRcontrol_getalarminfoPtr;

}

namespace IceProxy
{

namespace modulePDR
{

class PDRcontrol : virtual public ::IceProxy::Ice::Object
{
public:

    bool getplaybackhandler(const ::modulePDR::PDRApplyObj& applyobj)
    {
        return getplaybackhandler(applyobj, 0);
    }
    bool getplaybackhandler(const ::modulePDR::PDRApplyObj& applyobj, const ::Ice::Context& __ctx)
    {
        return getplaybackhandler(applyobj, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getplaybackhandler(const ::modulePDR::PDRApplyObj& applyobj)
    {
        return begin_getplaybackhandler(applyobj, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getplaybackhandler(const ::modulePDR::PDRApplyObj& applyobj, const ::Ice::Context& __ctx)
    {
        return begin_getplaybackhandler(applyobj, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getplaybackhandler(const ::modulePDR::PDRApplyObj& applyobj, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getplaybackhandler(applyobj, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getplaybackhandler(const ::modulePDR::PDRApplyObj& applyobj, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getplaybackhandler(applyobj, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getplaybackhandler(const ::modulePDR::PDRApplyObj& applyobj, const ::modulePDR::Callback_PDRcontrol_getplaybackhandlerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getplaybackhandler(applyobj, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getplaybackhandler(const ::modulePDR::PDRApplyObj& applyobj, const ::Ice::Context& __ctx, const ::modulePDR::Callback_PDRcontrol_getplaybackhandlerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getplaybackhandler(applyobj, &__ctx, __del, __cookie);
    }

    bool end_getplaybackhandler(const ::Ice::AsyncResultPtr&);
    
private:

    bool getplaybackhandler(const ::modulePDR::PDRApplyObj&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getplaybackhandler(const ::modulePDR::PDRApplyObj&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void jointheplayback(const ::std::string& clientName)
    {
        jointheplayback(clientName, 0);
    }
    void jointheplayback(const ::std::string& clientName, const ::Ice::Context& __ctx)
    {
        jointheplayback(clientName, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_jointheplayback(const ::std::string& clientName)
    {
        return begin_jointheplayback(clientName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_jointheplayback(const ::std::string& clientName, const ::Ice::Context& __ctx)
    {
        return begin_jointheplayback(clientName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_jointheplayback(const ::std::string& clientName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_jointheplayback(clientName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_jointheplayback(const ::std::string& clientName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_jointheplayback(clientName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_jointheplayback(const ::std::string& clientName, const ::modulePDR::Callback_PDRcontrol_jointheplaybackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_jointheplayback(clientName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_jointheplayback(const ::std::string& clientName, const ::Ice::Context& __ctx, const ::modulePDR::Callback_PDRcontrol_jointheplaybackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_jointheplayback(clientName, &__ctx, __del, __cookie);
    }

    void end_jointheplayback(const ::Ice::AsyncResultPtr&);
    
private:

    void jointheplayback(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_jointheplayback(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void play()
    {
        play(0);
    }
    void play(const ::Ice::Context& __ctx)
    {
        play(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_play()
    {
        return begin_play(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_play(const ::Ice::Context& __ctx)
    {
        return begin_play(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_play(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_play(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_play(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_play(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_play(const ::modulePDR::Callback_PDRcontrol_playPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_play(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_play(const ::Ice::Context& __ctx, const ::modulePDR::Callback_PDRcontrol_playPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_play(&__ctx, __del, __cookie);
    }

    void end_play(const ::Ice::AsyncResultPtr&);
    
private:

    void play(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_play(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void pause()
    {
        pause(0);
    }
    void pause(const ::Ice::Context& __ctx)
    {
        pause(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_pause()
    {
        return begin_pause(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_pause(const ::Ice::Context& __ctx)
    {
        return begin_pause(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_pause(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_pause(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_pause(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_pause(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_pause(const ::modulePDR::Callback_PDRcontrol_pausePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_pause(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_pause(const ::Ice::Context& __ctx, const ::modulePDR::Callback_PDRcontrol_pausePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_pause(&__ctx, __del, __cookie);
    }

    void end_pause(const ::Ice::AsyncResultPtr&);
    
private:

    void pause(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_pause(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void stop()
    {
        stop(0);
    }
    void stop(const ::Ice::Context& __ctx)
    {
        stop(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_stop()
    {
        return begin_stop(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stop(const ::Ice::Context& __ctx)
    {
        return begin_stop(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stop(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stop(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stop(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stop(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stop(const ::modulePDR::Callback_PDRcontrol_stopPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stop(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stop(const ::Ice::Context& __ctx, const ::modulePDR::Callback_PDRcontrol_stopPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stop(&__ctx, __del, __cookie);
    }

    void end_stop(const ::Ice::AsyncResultPtr&);
    
private:

    void stop(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_stop(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int PreviousFrame()
    {
        return PreviousFrame(0);
    }
    ::Ice::Int PreviousFrame(const ::Ice::Context& __ctx)
    {
        return PreviousFrame(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_PreviousFrame()
    {
        return begin_PreviousFrame(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_PreviousFrame(const ::Ice::Context& __ctx)
    {
        return begin_PreviousFrame(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_PreviousFrame(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PreviousFrame(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_PreviousFrame(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PreviousFrame(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_PreviousFrame(const ::modulePDR::Callback_PDRcontrol_PreviousFramePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PreviousFrame(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_PreviousFrame(const ::Ice::Context& __ctx, const ::modulePDR::Callback_PDRcontrol_PreviousFramePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PreviousFrame(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_PreviousFrame(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int PreviousFrame(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_PreviousFrame(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int LatterFrame()
    {
        return LatterFrame(0);
    }
    ::Ice::Int LatterFrame(const ::Ice::Context& __ctx)
    {
        return LatterFrame(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_LatterFrame()
    {
        return begin_LatterFrame(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_LatterFrame(const ::Ice::Context& __ctx)
    {
        return begin_LatterFrame(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_LatterFrame(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_LatterFrame(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_LatterFrame(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_LatterFrame(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_LatterFrame(const ::modulePDR::Callback_PDRcontrol_LatterFramePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_LatterFrame(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_LatterFrame(const ::Ice::Context& __ctx, const ::modulePDR::Callback_PDRcontrol_LatterFramePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_LatterFrame(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_LatterFrame(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int LatterFrame(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_LatterFrame(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void SetFrame(::Ice::Int FrameNum)
    {
        SetFrame(FrameNum, 0);
    }
    void SetFrame(::Ice::Int FrameNum, const ::Ice::Context& __ctx)
    {
        SetFrame(FrameNum, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_SetFrame(::Ice::Int FrameNum)
    {
        return begin_SetFrame(FrameNum, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetFrame(::Ice::Int FrameNum, const ::Ice::Context& __ctx)
    {
        return begin_SetFrame(FrameNum, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetFrame(::Ice::Int FrameNum, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetFrame(FrameNum, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetFrame(::Ice::Int FrameNum, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetFrame(FrameNum, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetFrame(::Ice::Int FrameNum, const ::modulePDR::Callback_PDRcontrol_SetFramePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetFrame(FrameNum, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetFrame(::Ice::Int FrameNum, const ::Ice::Context& __ctx, const ::modulePDR::Callback_PDRcontrol_SetFramePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetFrame(FrameNum, &__ctx, __del, __cookie);
    }

    void end_SetFrame(const ::Ice::AsyncResultPtr&);
    
private:

    void SetFrame(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SetFrame(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setplayspeed(::Ice::Int speedNum)
    {
        setplayspeed(speedNum, 0);
    }
    void setplayspeed(::Ice::Int speedNum, const ::Ice::Context& __ctx)
    {
        setplayspeed(speedNum, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setplayspeed(::Ice::Int speedNum)
    {
        return begin_setplayspeed(speedNum, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setplayspeed(::Ice::Int speedNum, const ::Ice::Context& __ctx)
    {
        return begin_setplayspeed(speedNum, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setplayspeed(::Ice::Int speedNum, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setplayspeed(speedNum, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setplayspeed(::Ice::Int speedNum, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setplayspeed(speedNum, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setplayspeed(::Ice::Int speedNum, const ::modulePDR::Callback_PDRcontrol_setplayspeedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setplayspeed(speedNum, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setplayspeed(::Ice::Int speedNum, const ::Ice::Context& __ctx, const ::modulePDR::Callback_PDRcontrol_setplayspeedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setplayspeed(speedNum, &__ctx, __del, __cookie);
    }

    void end_setplayspeed(const ::Ice::AsyncResultPtr&);
    
private:

    void setplayspeed(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setplayspeed(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int getInitstatus()
    {
        return getInitstatus(0);
    }
    ::Ice::Int getInitstatus(const ::Ice::Context& __ctx)
    {
        return getInitstatus(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getInitstatus()
    {
        return begin_getInitstatus(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getInitstatus(const ::Ice::Context& __ctx)
    {
        return begin_getInitstatus(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getInitstatus(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getInitstatus(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getInitstatus(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getInitstatus(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getInitstatus(const ::modulePDR::Callback_PDRcontrol_getInitstatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getInitstatus(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getInitstatus(const ::Ice::Context& __ctx, const ::modulePDR::Callback_PDRcontrol_getInitstatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getInitstatus(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_getInitstatus(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getInitstatus(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getInitstatus(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int getplayframe()
    {
        return getplayframe(0);
    }
    ::Ice::Int getplayframe(const ::Ice::Context& __ctx)
    {
        return getplayframe(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getplayframe()
    {
        return begin_getplayframe(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getplayframe(const ::Ice::Context& __ctx)
    {
        return begin_getplayframe(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getplayframe(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getplayframe(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getplayframe(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getplayframe(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getplayframe(const ::modulePDR::Callback_PDRcontrol_getplayframePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getplayframe(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getplayframe(const ::Ice::Context& __ctx, const ::modulePDR::Callback_PDRcontrol_getplayframePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getplayframe(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_getplayframe(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getplayframe(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getplayframe(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string getplayingclientlist()
    {
        return getplayingclientlist(0);
    }
    ::std::string getplayingclientlist(const ::Ice::Context& __ctx)
    {
        return getplayingclientlist(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getplayingclientlist()
    {
        return begin_getplayingclientlist(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getplayingclientlist(const ::Ice::Context& __ctx)
    {
        return begin_getplayingclientlist(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getplayingclientlist(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getplayingclientlist(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getplayingclientlist(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getplayingclientlist(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getplayingclientlist(const ::modulePDR::Callback_PDRcontrol_getplayingclientlistPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getplayingclientlist(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getplayingclientlist(const ::Ice::Context& __ctx, const ::modulePDR::Callback_PDRcontrol_getplayingclientlistPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getplayingclientlist(&__ctx, __del, __cookie);
    }

    ::std::string end_getplayingclientlist(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string getplayingclientlist(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getplayingclientlist(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string getplayingequipObj()
    {
        return getplayingequipObj(0);
    }
    ::std::string getplayingequipObj(const ::Ice::Context& __ctx)
    {
        return getplayingequipObj(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getplayingequipObj()
    {
        return begin_getplayingequipObj(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getplayingequipObj(const ::Ice::Context& __ctx)
    {
        return begin_getplayingequipObj(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getplayingequipObj(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getplayingequipObj(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getplayingequipObj(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getplayingequipObj(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getplayingequipObj(const ::modulePDR::Callback_PDRcontrol_getplayingequipObjPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getplayingequipObj(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getplayingequipObj(const ::Ice::Context& __ctx, const ::modulePDR::Callback_PDRcontrol_getplayingequipObjPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getplayingequipObj(&__ctx, __del, __cookie);
    }

    ::std::string end_getplayingequipObj(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string getplayingequipObj(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getplayingequipObj(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string getplayingfaultTime()
    {
        return getplayingfaultTime(0);
    }
    ::std::string getplayingfaultTime(const ::Ice::Context& __ctx)
    {
        return getplayingfaultTime(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getplayingfaultTime()
    {
        return begin_getplayingfaultTime(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getplayingfaultTime(const ::Ice::Context& __ctx)
    {
        return begin_getplayingfaultTime(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getplayingfaultTime(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getplayingfaultTime(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getplayingfaultTime(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getplayingfaultTime(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getplayingfaultTime(const ::modulePDR::Callback_PDRcontrol_getplayingfaultTimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getplayingfaultTime(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getplayingfaultTime(const ::Ice::Context& __ctx, const ::modulePDR::Callback_PDRcontrol_getplayingfaultTimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getplayingfaultTime(&__ctx, __del, __cookie);
    }

    ::std::string end_getplayingfaultTime(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string getplayingfaultTime(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getplayingfaultTime(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void connectCheck()
    {
        connectCheck(0);
    }
    void connectCheck(const ::Ice::Context& __ctx)
    {
        connectCheck(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_connectCheck()
    {
        return begin_connectCheck(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_connectCheck(const ::Ice::Context& __ctx)
    {
        return begin_connectCheck(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_connectCheck(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_connectCheck(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_connectCheck(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_connectCheck(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_connectCheck(const ::modulePDR::Callback_PDRcontrol_connectCheckPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_connectCheck(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_connectCheck(const ::Ice::Context& __ctx, const ::modulePDR::Callback_PDRcontrol_connectCheckPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_connectCheck(&__ctx, __del, __cookie);
    }

    void end_connectCheck(const ::Ice::AsyncResultPtr&);
    
private:

    void connectCheck(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_connectCheck(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getanalogValue(::Ice::Int analogid, ::modulePDR::AnalogValueSequence& analogvalues)
    {
        getanalogValue(analogid, analogvalues, 0);
    }
    void getanalogValue(::Ice::Int analogid, ::modulePDR::AnalogValueSequence& analogvalues, const ::Ice::Context& __ctx)
    {
        getanalogValue(analogid, analogvalues, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getanalogValue(::Ice::Int analogid)
    {
        return begin_getanalogValue(analogid, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getanalogValue(::Ice::Int analogid, const ::Ice::Context& __ctx)
    {
        return begin_getanalogValue(analogid, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getanalogValue(::Ice::Int analogid, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getanalogValue(analogid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getanalogValue(::Ice::Int analogid, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getanalogValue(analogid, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getanalogValue(::Ice::Int analogid, const ::modulePDR::Callback_PDRcontrol_getanalogValuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getanalogValue(analogid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getanalogValue(::Ice::Int analogid, const ::Ice::Context& __ctx, const ::modulePDR::Callback_PDRcontrol_getanalogValuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getanalogValue(analogid, &__ctx, __del, __cookie);
    }

    void end_getanalogValue(::modulePDR::AnalogValueSequence& analogvalues, const ::Ice::AsyncResultPtr&);
    
private:

    void getanalogValue(::Ice::Int, ::modulePDR::AnalogValueSequence&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getanalogValue(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getalarminfo(::modulePDR::AlarmInfoSequence& alarminfos)
    {
        getalarminfo(alarminfos, 0);
    }
    void getalarminfo(::modulePDR::AlarmInfoSequence& alarminfos, const ::Ice::Context& __ctx)
    {
        getalarminfo(alarminfos, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getalarminfo()
    {
        return begin_getalarminfo(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getalarminfo(const ::Ice::Context& __ctx)
    {
        return begin_getalarminfo(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getalarminfo(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getalarminfo(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getalarminfo(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getalarminfo(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getalarminfo(const ::modulePDR::Callback_PDRcontrol_getalarminfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getalarminfo(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getalarminfo(const ::Ice::Context& __ctx, const ::modulePDR::Callback_PDRcontrol_getalarminfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getalarminfo(&__ctx, __del, __cookie);
    }

    void end_getalarminfo(::modulePDR::AlarmInfoSequence& alarminfos, const ::Ice::AsyncResultPtr&);
    
private:

    void getalarminfo(::modulePDR::AlarmInfoSequence&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getalarminfo(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<PDRcontrol> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<PDRcontrol*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<PDRcontrol*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<PDRcontrol> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<PDRcontrol*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<PDRcontrol*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<PDRcontrol> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<PDRcontrol*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<PDRcontrol*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<PDRcontrol> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<PDRcontrol*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<PDRcontrol*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<PDRcontrol> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<PDRcontrol*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<PDRcontrol*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<PDRcontrol> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<PDRcontrol*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<PDRcontrol*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<PDRcontrol> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<PDRcontrol*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<PDRcontrol*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<PDRcontrol> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<PDRcontrol*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<PDRcontrol*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<PDRcontrol> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<PDRcontrol*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<PDRcontrol*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<PDRcontrol> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<PDRcontrol*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<PDRcontrol*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<PDRcontrol> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<PDRcontrol*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<PDRcontrol*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<PDRcontrol> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<PDRcontrol*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<PDRcontrol*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<PDRcontrol> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<PDRcontrol*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<PDRcontrol*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<PDRcontrol> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<PDRcontrol*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<PDRcontrol*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<PDRcontrol> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<PDRcontrol*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<PDRcontrol*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<PDRcontrol> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<PDRcontrol*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<PDRcontrol*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<PDRcontrol> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<PDRcontrol*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<PDRcontrol*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<PDRcontrol> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<PDRcontrol*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<PDRcontrol*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<PDRcontrol> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<PDRcontrol*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<PDRcontrol*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace modulePDR
{

class PDRcontrol : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual bool getplaybackhandler(const ::modulePDR::PDRApplyObj&, const ::Ice::Context*) = 0;

    virtual void jointheplayback(const ::std::string&, const ::Ice::Context*) = 0;

    virtual void play(const ::Ice::Context*) = 0;

    virtual void pause(const ::Ice::Context*) = 0;

    virtual void stop(const ::Ice::Context*) = 0;

    virtual ::Ice::Int PreviousFrame(const ::Ice::Context*) = 0;

    virtual ::Ice::Int LatterFrame(const ::Ice::Context*) = 0;

    virtual void SetFrame(::Ice::Int, const ::Ice::Context*) = 0;

    virtual void setplayspeed(::Ice::Int, const ::Ice::Context*) = 0;

    virtual ::Ice::Int getInitstatus(const ::Ice::Context*) = 0;

    virtual ::Ice::Int getplayframe(const ::Ice::Context*) = 0;

    virtual ::std::string getplayingclientlist(const ::Ice::Context*) = 0;

    virtual ::std::string getplayingequipObj(const ::Ice::Context*) = 0;

    virtual ::std::string getplayingfaultTime(const ::Ice::Context*) = 0;

    virtual void connectCheck(const ::Ice::Context*) = 0;

    virtual void getanalogValue(::Ice::Int, ::modulePDR::AnalogValueSequence&, const ::Ice::Context*) = 0;

    virtual void getalarminfo(::modulePDR::AlarmInfoSequence&, const ::Ice::Context*) = 0;
};

}

}

namespace IceDelegateM
{

namespace modulePDR
{

class PDRcontrol : virtual public ::IceDelegate::modulePDR::PDRcontrol,
                   virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual bool getplaybackhandler(const ::modulePDR::PDRApplyObj&, const ::Ice::Context*);

    virtual void jointheplayback(const ::std::string&, const ::Ice::Context*);

    virtual void play(const ::Ice::Context*);

    virtual void pause(const ::Ice::Context*);

    virtual void stop(const ::Ice::Context*);

    virtual ::Ice::Int PreviousFrame(const ::Ice::Context*);

    virtual ::Ice::Int LatterFrame(const ::Ice::Context*);

    virtual void SetFrame(::Ice::Int, const ::Ice::Context*);

    virtual void setplayspeed(::Ice::Int, const ::Ice::Context*);

    virtual ::Ice::Int getInitstatus(const ::Ice::Context*);

    virtual ::Ice::Int getplayframe(const ::Ice::Context*);

    virtual ::std::string getplayingclientlist(const ::Ice::Context*);

    virtual ::std::string getplayingequipObj(const ::Ice::Context*);

    virtual ::std::string getplayingfaultTime(const ::Ice::Context*);

    virtual void connectCheck(const ::Ice::Context*);

    virtual void getanalogValue(::Ice::Int, ::modulePDR::AnalogValueSequence&, const ::Ice::Context*);

    virtual void getalarminfo(::modulePDR::AlarmInfoSequence&, const ::Ice::Context*);
};

}

}

namespace IceDelegateD
{

namespace modulePDR
{

class PDRcontrol : virtual public ::IceDelegate::modulePDR::PDRcontrol,
                   virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual bool getplaybackhandler(const ::modulePDR::PDRApplyObj&, const ::Ice::Context*);

    virtual void jointheplayback(const ::std::string&, const ::Ice::Context*);

    virtual void play(const ::Ice::Context*);

    virtual void pause(const ::Ice::Context*);

    virtual void stop(const ::Ice::Context*);

    virtual ::Ice::Int PreviousFrame(const ::Ice::Context*);

    virtual ::Ice::Int LatterFrame(const ::Ice::Context*);

    virtual void SetFrame(::Ice::Int, const ::Ice::Context*);

    virtual void setplayspeed(::Ice::Int, const ::Ice::Context*);

    virtual ::Ice::Int getInitstatus(const ::Ice::Context*);

    virtual ::Ice::Int getplayframe(const ::Ice::Context*);

    virtual ::std::string getplayingclientlist(const ::Ice::Context*);

    virtual ::std::string getplayingequipObj(const ::Ice::Context*);

    virtual ::std::string getplayingfaultTime(const ::Ice::Context*);

    virtual void connectCheck(const ::Ice::Context*);

    virtual void getanalogValue(::Ice::Int, ::modulePDR::AnalogValueSequence&, const ::Ice::Context*);

    virtual void getalarminfo(::modulePDR::AlarmInfoSequence&, const ::Ice::Context*);
};

}

}

namespace modulePDR
{

class PDRcontrol : virtual public ::Ice::Object
{
public:

    typedef PDRcontrolPrx ProxyType;
    typedef PDRcontrolPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual bool getplaybackhandler(const ::modulePDR::PDRApplyObj&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getplaybackhandler(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void jointheplayback(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___jointheplayback(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void play(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___play(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void pause(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___pause(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void stop(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___stop(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int PreviousFrame(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___PreviousFrame(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int LatterFrame(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___LatterFrame(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void SetFrame(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SetFrame(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setplayspeed(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setplayspeed(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int getInitstatus(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getInitstatus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int getplayframe(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getplayframe(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string getplayingclientlist(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getplayingclientlist(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string getplayingequipObj(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getplayingequipObj(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string getplayingfaultTime(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getplayingfaultTime(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void connectCheck(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___connectCheck(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getanalogValue(::Ice::Int, ::modulePDR::AnalogValueSequence&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getanalogValue(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getalarminfo(::modulePDR::AlarmInfoSequence&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getalarminfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const PDRcontrol& l, const PDRcontrol& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const PDRcontrol& l, const PDRcontrol& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace modulePDR
{

template<class T>
class CallbackNC_PDRcontrol_getplaybackhandler : public Callback_PDRcontrol_getplaybackhandler_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_PDRcontrol_getplaybackhandler(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::modulePDR::PDRcontrolPrx __proxy = ::modulePDR::PDRcontrolPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_getplaybackhandler(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_PDRcontrol_getplaybackhandlerPtr
newCallback_PDRcontrol_getplaybackhandler(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_getplaybackhandler<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PDRcontrol_getplaybackhandlerPtr
newCallback_PDRcontrol_getplaybackhandler(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_getplaybackhandler<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PDRcontrol_getplaybackhandler : public Callback_PDRcontrol_getplaybackhandler_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_PDRcontrol_getplaybackhandler(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::modulePDR::PDRcontrolPrx __proxy = ::modulePDR::PDRcontrolPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_getplaybackhandler(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PDRcontrol_getplaybackhandlerPtr
newCallback_PDRcontrol_getplaybackhandler(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_getplaybackhandler<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PDRcontrol_getplaybackhandlerPtr
newCallback_PDRcontrol_getplaybackhandler(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_getplaybackhandler<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PDRcontrol_jointheplayback : public Callback_PDRcontrol_jointheplayback_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PDRcontrol_jointheplayback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PDRcontrol_jointheplaybackPtr
newCallback_PDRcontrol_jointheplayback(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_jointheplayback<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PDRcontrol_jointheplaybackPtr
newCallback_PDRcontrol_jointheplayback(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_jointheplayback<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PDRcontrol_jointheplaybackPtr
newCallback_PDRcontrol_jointheplayback(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_jointheplayback<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PDRcontrol_jointheplaybackPtr
newCallback_PDRcontrol_jointheplayback(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_jointheplayback<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PDRcontrol_jointheplayback : public Callback_PDRcontrol_jointheplayback_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PDRcontrol_jointheplayback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PDRcontrol_jointheplaybackPtr
newCallback_PDRcontrol_jointheplayback(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_jointheplayback<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PDRcontrol_jointheplaybackPtr
newCallback_PDRcontrol_jointheplayback(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_jointheplayback<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PDRcontrol_jointheplaybackPtr
newCallback_PDRcontrol_jointheplayback(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_jointheplayback<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PDRcontrol_jointheplaybackPtr
newCallback_PDRcontrol_jointheplayback(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_jointheplayback<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PDRcontrol_play : public Callback_PDRcontrol_play_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PDRcontrol_play(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PDRcontrol_playPtr
newCallback_PDRcontrol_play(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_play<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PDRcontrol_playPtr
newCallback_PDRcontrol_play(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_play<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PDRcontrol_playPtr
newCallback_PDRcontrol_play(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_play<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PDRcontrol_playPtr
newCallback_PDRcontrol_play(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_play<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PDRcontrol_play : public Callback_PDRcontrol_play_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PDRcontrol_play(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PDRcontrol_playPtr
newCallback_PDRcontrol_play(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_play<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PDRcontrol_playPtr
newCallback_PDRcontrol_play(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_play<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PDRcontrol_playPtr
newCallback_PDRcontrol_play(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_play<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PDRcontrol_playPtr
newCallback_PDRcontrol_play(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_play<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PDRcontrol_pause : public Callback_PDRcontrol_pause_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PDRcontrol_pause(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PDRcontrol_pausePtr
newCallback_PDRcontrol_pause(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_pause<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PDRcontrol_pausePtr
newCallback_PDRcontrol_pause(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_pause<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PDRcontrol_pausePtr
newCallback_PDRcontrol_pause(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_pause<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PDRcontrol_pausePtr
newCallback_PDRcontrol_pause(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_pause<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PDRcontrol_pause : public Callback_PDRcontrol_pause_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PDRcontrol_pause(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PDRcontrol_pausePtr
newCallback_PDRcontrol_pause(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_pause<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PDRcontrol_pausePtr
newCallback_PDRcontrol_pause(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_pause<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PDRcontrol_pausePtr
newCallback_PDRcontrol_pause(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_pause<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PDRcontrol_pausePtr
newCallback_PDRcontrol_pause(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_pause<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PDRcontrol_stop : public Callback_PDRcontrol_stop_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PDRcontrol_stop(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PDRcontrol_stopPtr
newCallback_PDRcontrol_stop(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_stop<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PDRcontrol_stopPtr
newCallback_PDRcontrol_stop(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_stop<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PDRcontrol_stopPtr
newCallback_PDRcontrol_stop(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_stop<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PDRcontrol_stopPtr
newCallback_PDRcontrol_stop(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_stop<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PDRcontrol_stop : public Callback_PDRcontrol_stop_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PDRcontrol_stop(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PDRcontrol_stopPtr
newCallback_PDRcontrol_stop(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_stop<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PDRcontrol_stopPtr
newCallback_PDRcontrol_stop(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_stop<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PDRcontrol_stopPtr
newCallback_PDRcontrol_stop(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_stop<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PDRcontrol_stopPtr
newCallback_PDRcontrol_stop(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_stop<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PDRcontrol_PreviousFrame : public Callback_PDRcontrol_PreviousFrame_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_PDRcontrol_PreviousFrame(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::modulePDR::PDRcontrolPrx __proxy = ::modulePDR::PDRcontrolPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_PreviousFrame(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_PDRcontrol_PreviousFramePtr
newCallback_PDRcontrol_PreviousFrame(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_PreviousFrame<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PDRcontrol_PreviousFramePtr
newCallback_PDRcontrol_PreviousFrame(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_PreviousFrame<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PDRcontrol_PreviousFrame : public Callback_PDRcontrol_PreviousFrame_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_PDRcontrol_PreviousFrame(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::modulePDR::PDRcontrolPrx __proxy = ::modulePDR::PDRcontrolPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_PreviousFrame(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PDRcontrol_PreviousFramePtr
newCallback_PDRcontrol_PreviousFrame(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_PreviousFrame<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PDRcontrol_PreviousFramePtr
newCallback_PDRcontrol_PreviousFrame(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_PreviousFrame<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PDRcontrol_LatterFrame : public Callback_PDRcontrol_LatterFrame_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_PDRcontrol_LatterFrame(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::modulePDR::PDRcontrolPrx __proxy = ::modulePDR::PDRcontrolPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_LatterFrame(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_PDRcontrol_LatterFramePtr
newCallback_PDRcontrol_LatterFrame(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_LatterFrame<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PDRcontrol_LatterFramePtr
newCallback_PDRcontrol_LatterFrame(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_LatterFrame<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PDRcontrol_LatterFrame : public Callback_PDRcontrol_LatterFrame_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_PDRcontrol_LatterFrame(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::modulePDR::PDRcontrolPrx __proxy = ::modulePDR::PDRcontrolPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_LatterFrame(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PDRcontrol_LatterFramePtr
newCallback_PDRcontrol_LatterFrame(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_LatterFrame<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PDRcontrol_LatterFramePtr
newCallback_PDRcontrol_LatterFrame(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_LatterFrame<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PDRcontrol_SetFrame : public Callback_PDRcontrol_SetFrame_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PDRcontrol_SetFrame(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PDRcontrol_SetFramePtr
newCallback_PDRcontrol_SetFrame(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_SetFrame<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PDRcontrol_SetFramePtr
newCallback_PDRcontrol_SetFrame(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_SetFrame<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PDRcontrol_SetFramePtr
newCallback_PDRcontrol_SetFrame(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_SetFrame<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PDRcontrol_SetFramePtr
newCallback_PDRcontrol_SetFrame(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_SetFrame<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PDRcontrol_SetFrame : public Callback_PDRcontrol_SetFrame_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PDRcontrol_SetFrame(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PDRcontrol_SetFramePtr
newCallback_PDRcontrol_SetFrame(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_SetFrame<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PDRcontrol_SetFramePtr
newCallback_PDRcontrol_SetFrame(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_SetFrame<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PDRcontrol_SetFramePtr
newCallback_PDRcontrol_SetFrame(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_SetFrame<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PDRcontrol_SetFramePtr
newCallback_PDRcontrol_SetFrame(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_SetFrame<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PDRcontrol_setplayspeed : public Callback_PDRcontrol_setplayspeed_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PDRcontrol_setplayspeed(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PDRcontrol_setplayspeedPtr
newCallback_PDRcontrol_setplayspeed(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_setplayspeed<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PDRcontrol_setplayspeedPtr
newCallback_PDRcontrol_setplayspeed(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_setplayspeed<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PDRcontrol_setplayspeedPtr
newCallback_PDRcontrol_setplayspeed(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_setplayspeed<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PDRcontrol_setplayspeedPtr
newCallback_PDRcontrol_setplayspeed(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_setplayspeed<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PDRcontrol_setplayspeed : public Callback_PDRcontrol_setplayspeed_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PDRcontrol_setplayspeed(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PDRcontrol_setplayspeedPtr
newCallback_PDRcontrol_setplayspeed(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_setplayspeed<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PDRcontrol_setplayspeedPtr
newCallback_PDRcontrol_setplayspeed(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_setplayspeed<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PDRcontrol_setplayspeedPtr
newCallback_PDRcontrol_setplayspeed(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_setplayspeed<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PDRcontrol_setplayspeedPtr
newCallback_PDRcontrol_setplayspeed(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_setplayspeed<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PDRcontrol_getInitstatus : public Callback_PDRcontrol_getInitstatus_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_PDRcontrol_getInitstatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::modulePDR::PDRcontrolPrx __proxy = ::modulePDR::PDRcontrolPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getInitstatus(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_PDRcontrol_getInitstatusPtr
newCallback_PDRcontrol_getInitstatus(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_getInitstatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PDRcontrol_getInitstatusPtr
newCallback_PDRcontrol_getInitstatus(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_getInitstatus<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PDRcontrol_getInitstatus : public Callback_PDRcontrol_getInitstatus_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_PDRcontrol_getInitstatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::modulePDR::PDRcontrolPrx __proxy = ::modulePDR::PDRcontrolPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getInitstatus(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PDRcontrol_getInitstatusPtr
newCallback_PDRcontrol_getInitstatus(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_getInitstatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PDRcontrol_getInitstatusPtr
newCallback_PDRcontrol_getInitstatus(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_getInitstatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PDRcontrol_getplayframe : public Callback_PDRcontrol_getplayframe_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_PDRcontrol_getplayframe(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::modulePDR::PDRcontrolPrx __proxy = ::modulePDR::PDRcontrolPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getplayframe(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_PDRcontrol_getplayframePtr
newCallback_PDRcontrol_getplayframe(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_getplayframe<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PDRcontrol_getplayframePtr
newCallback_PDRcontrol_getplayframe(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_getplayframe<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PDRcontrol_getplayframe : public Callback_PDRcontrol_getplayframe_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_PDRcontrol_getplayframe(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::modulePDR::PDRcontrolPrx __proxy = ::modulePDR::PDRcontrolPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getplayframe(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PDRcontrol_getplayframePtr
newCallback_PDRcontrol_getplayframe(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_getplayframe<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PDRcontrol_getplayframePtr
newCallback_PDRcontrol_getplayframe(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_getplayframe<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PDRcontrol_getplayingclientlist : public Callback_PDRcontrol_getplayingclientlist_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_PDRcontrol_getplayingclientlist(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::modulePDR::PDRcontrolPrx __proxy = ::modulePDR::PDRcontrolPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getplayingclientlist(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_PDRcontrol_getplayingclientlistPtr
newCallback_PDRcontrol_getplayingclientlist(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_getplayingclientlist<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PDRcontrol_getplayingclientlistPtr
newCallback_PDRcontrol_getplayingclientlist(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_getplayingclientlist<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PDRcontrol_getplayingclientlist : public Callback_PDRcontrol_getplayingclientlist_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_PDRcontrol_getplayingclientlist(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::modulePDR::PDRcontrolPrx __proxy = ::modulePDR::PDRcontrolPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getplayingclientlist(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PDRcontrol_getplayingclientlistPtr
newCallback_PDRcontrol_getplayingclientlist(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_getplayingclientlist<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PDRcontrol_getplayingclientlistPtr
newCallback_PDRcontrol_getplayingclientlist(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_getplayingclientlist<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PDRcontrol_getplayingequipObj : public Callback_PDRcontrol_getplayingequipObj_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_PDRcontrol_getplayingequipObj(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::modulePDR::PDRcontrolPrx __proxy = ::modulePDR::PDRcontrolPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getplayingequipObj(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_PDRcontrol_getplayingequipObjPtr
newCallback_PDRcontrol_getplayingequipObj(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_getplayingequipObj<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PDRcontrol_getplayingequipObjPtr
newCallback_PDRcontrol_getplayingequipObj(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_getplayingequipObj<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PDRcontrol_getplayingequipObj : public Callback_PDRcontrol_getplayingequipObj_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_PDRcontrol_getplayingequipObj(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::modulePDR::PDRcontrolPrx __proxy = ::modulePDR::PDRcontrolPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getplayingequipObj(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PDRcontrol_getplayingequipObjPtr
newCallback_PDRcontrol_getplayingequipObj(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_getplayingequipObj<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PDRcontrol_getplayingequipObjPtr
newCallback_PDRcontrol_getplayingequipObj(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_getplayingequipObj<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PDRcontrol_getplayingfaultTime : public Callback_PDRcontrol_getplayingfaultTime_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_PDRcontrol_getplayingfaultTime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::modulePDR::PDRcontrolPrx __proxy = ::modulePDR::PDRcontrolPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getplayingfaultTime(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_PDRcontrol_getplayingfaultTimePtr
newCallback_PDRcontrol_getplayingfaultTime(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_getplayingfaultTime<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PDRcontrol_getplayingfaultTimePtr
newCallback_PDRcontrol_getplayingfaultTime(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_getplayingfaultTime<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PDRcontrol_getplayingfaultTime : public Callback_PDRcontrol_getplayingfaultTime_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_PDRcontrol_getplayingfaultTime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::modulePDR::PDRcontrolPrx __proxy = ::modulePDR::PDRcontrolPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getplayingfaultTime(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PDRcontrol_getplayingfaultTimePtr
newCallback_PDRcontrol_getplayingfaultTime(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_getplayingfaultTime<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PDRcontrol_getplayingfaultTimePtr
newCallback_PDRcontrol_getplayingfaultTime(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_getplayingfaultTime<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PDRcontrol_connectCheck : public Callback_PDRcontrol_connectCheck_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PDRcontrol_connectCheck(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PDRcontrol_connectCheckPtr
newCallback_PDRcontrol_connectCheck(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_connectCheck<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PDRcontrol_connectCheckPtr
newCallback_PDRcontrol_connectCheck(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_connectCheck<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PDRcontrol_connectCheckPtr
newCallback_PDRcontrol_connectCheck(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_connectCheck<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PDRcontrol_connectCheckPtr
newCallback_PDRcontrol_connectCheck(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_connectCheck<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PDRcontrol_connectCheck : public Callback_PDRcontrol_connectCheck_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PDRcontrol_connectCheck(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PDRcontrol_connectCheckPtr
newCallback_PDRcontrol_connectCheck(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_connectCheck<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PDRcontrol_connectCheckPtr
newCallback_PDRcontrol_connectCheck(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_connectCheck<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PDRcontrol_connectCheckPtr
newCallback_PDRcontrol_connectCheck(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_connectCheck<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PDRcontrol_connectCheckPtr
newCallback_PDRcontrol_connectCheck(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_connectCheck<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PDRcontrol_getanalogValue : public Callback_PDRcontrol_getanalogValue_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::modulePDR::AnalogValueSequence&);

    CallbackNC_PDRcontrol_getanalogValue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::modulePDR::PDRcontrolPrx __proxy = ::modulePDR::PDRcontrolPrx::uncheckedCast(__result->getProxy());
        ::modulePDR::AnalogValueSequence analogvalues;
        try
        {
            __proxy->end_getanalogValue(analogvalues, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(analogvalues);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(analogvalues);
#endif
        }
    }

    Response response;
};

template<class T> Callback_PDRcontrol_getanalogValuePtr
newCallback_PDRcontrol_getanalogValue(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::modulePDR::AnalogValueSequence&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_getanalogValue<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PDRcontrol_getanalogValuePtr
newCallback_PDRcontrol_getanalogValue(T* instance, void (T::*cb)(const ::modulePDR::AnalogValueSequence&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_getanalogValue<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PDRcontrol_getanalogValue : public Callback_PDRcontrol_getanalogValue_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::modulePDR::AnalogValueSequence&, const CT&);

    Callback_PDRcontrol_getanalogValue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::modulePDR::PDRcontrolPrx __proxy = ::modulePDR::PDRcontrolPrx::uncheckedCast(__result->getProxy());
        ::modulePDR::AnalogValueSequence analogvalues;
        try
        {
            __proxy->end_getanalogValue(analogvalues, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(analogvalues, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(analogvalues, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PDRcontrol_getanalogValuePtr
newCallback_PDRcontrol_getanalogValue(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::modulePDR::AnalogValueSequence&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_getanalogValue<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PDRcontrol_getanalogValuePtr
newCallback_PDRcontrol_getanalogValue(T* instance, void (T::*cb)(const ::modulePDR::AnalogValueSequence&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_getanalogValue<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PDRcontrol_getalarminfo : public Callback_PDRcontrol_getalarminfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::modulePDR::AlarmInfoSequence&);

    CallbackNC_PDRcontrol_getalarminfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::modulePDR::PDRcontrolPrx __proxy = ::modulePDR::PDRcontrolPrx::uncheckedCast(__result->getProxy());
        ::modulePDR::AlarmInfoSequence alarminfos;
        try
        {
            __proxy->end_getalarminfo(alarminfos, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(alarminfos);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(alarminfos);
#endif
        }
    }

    Response response;
};

template<class T> Callback_PDRcontrol_getalarminfoPtr
newCallback_PDRcontrol_getalarminfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::modulePDR::AlarmInfoSequence&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_getalarminfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PDRcontrol_getalarminfoPtr
newCallback_PDRcontrol_getalarminfo(T* instance, void (T::*cb)(const ::modulePDR::AlarmInfoSequence&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PDRcontrol_getalarminfo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PDRcontrol_getalarminfo : public Callback_PDRcontrol_getalarminfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::modulePDR::AlarmInfoSequence&, const CT&);

    Callback_PDRcontrol_getalarminfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::modulePDR::PDRcontrolPrx __proxy = ::modulePDR::PDRcontrolPrx::uncheckedCast(__result->getProxy());
        ::modulePDR::AlarmInfoSequence alarminfos;
        try
        {
            __proxy->end_getalarminfo(alarminfos, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(alarminfos, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(alarminfos, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PDRcontrol_getalarminfoPtr
newCallback_PDRcontrol_getalarminfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::modulePDR::AlarmInfoSequence&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_getalarminfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PDRcontrol_getalarminfoPtr
newCallback_PDRcontrol_getalarminfo(T* instance, void (T::*cb)(const ::modulePDR::AlarmInfoSequence&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PDRcontrol_getalarminfo<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
