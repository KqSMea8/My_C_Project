// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `PDRcontrol.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include "PDRcontrol.h"
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/DisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

static const ::std::string __modulePDR__PDRcontrol__getplaybackhandler_name = "getplaybackhandler";

static const ::std::string __modulePDR__PDRcontrol__jointheplayback_name = "jointheplayback";

static const ::std::string __modulePDR__PDRcontrol__play_name = "play";

static const ::std::string __modulePDR__PDRcontrol__pause_name = "pause";

static const ::std::string __modulePDR__PDRcontrol__stop_name = "stop";

static const ::std::string __modulePDR__PDRcontrol__PreviousFrame_name = "PreviousFrame";

static const ::std::string __modulePDR__PDRcontrol__LatterFrame_name = "LatterFrame";

static const ::std::string __modulePDR__PDRcontrol__SetFrame_name = "SetFrame";

static const ::std::string __modulePDR__PDRcontrol__setplayspeed_name = "setplayspeed";

static const ::std::string __modulePDR__PDRcontrol__getInitstatus_name = "getInitstatus";

static const ::std::string __modulePDR__PDRcontrol__getplayframe_name = "getplayframe";

static const ::std::string __modulePDR__PDRcontrol__getplayingclientlist_name = "getplayingclientlist";

static const ::std::string __modulePDR__PDRcontrol__getplayingequipObj_name = "getplayingequipObj";

static const ::std::string __modulePDR__PDRcontrol__getplayingfaultTime_name = "getplayingfaultTime";

static const ::std::string __modulePDR__PDRcontrol__connectCheck_name = "connectCheck";

static const ::std::string __modulePDR__PDRcontrol__getanalogValue_name = "getanalogValue";

static const ::std::string __modulePDR__PDRcontrol__getalarminfo_name = "getalarminfo";

::Ice::Object* IceInternal::upCast(::modulePDR::PDRcontrol* p) { return p; }
::IceProxy::Ice::Object* IceInternal::upCast(::IceProxy::modulePDR::PDRcontrol* p) { return p; }

void
modulePDR::__read(::IceInternal::BasicStream* __is, ::modulePDR::PDRcontrolPrx& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::modulePDR::PDRcontrol;
        v->__copyFrom(proxy);
    }
}

void
modulePDR::PDRApplyObj::__write(::IceInternal::BasicStream* __os) const
{
    __os->write(equipObj);
    __os->write(faultTime);
    __os->write(startTime);
    __os->write(endTime);
    __os->write(startFrame);
    __os->write(endFrame);
    __os->write(stationName);
    __os->write(feederName);
    __os->write(clientName);
    __os->write(playspeed);
    __os->write(interval);
}

void
modulePDR::PDRApplyObj::__read(::IceInternal::BasicStream* __is)
{
    __is->read(equipObj);
    __is->read(faultTime);
    __is->read(startTime);
    __is->read(endTime);
    __is->read(startFrame);
    __is->read(endFrame);
    __is->read(stationName);
    __is->read(feederName);
    __is->read(clientName);
    __is->read(playspeed);
    __is->read(interval);
}

void
modulePDR::analogTMeasValue::__write(::IceInternal::BasicStream* __os) const
{
    __os->write(dtUpdateTime);
    __os->write(dtDataTime);
    __os->write(dRawValue);
    __os->write(dCalValue);
    __os->write(nQuality);
}

void
modulePDR::analogTMeasValue::__read(::IceInternal::BasicStream* __is)
{
    __is->read(dtUpdateTime);
    __is->read(dtDataTime);
    __is->read(dRawValue);
    __is->read(dCalValue);
    __is->read(nQuality);
}

void
modulePDR::hisalarmInfo::__write(::IceInternal::BasicStream* __os) const
{
    __os->write(objid);
    __os->write(alarmid);
    __os->write(objtype);
    __os->write(thetime);
    __os->write(description);
    __os->write(report);
    __os->write(actuser);
    __os->write(confirmtime);
    __os->write(objdesc);
    __os->write(thetimestr);
}

void
modulePDR::hisalarmInfo::__read(::IceInternal::BasicStream* __is)
{
    __is->read(objid);
    __is->read(alarmid);
    __is->read(objtype);
    __is->read(thetime);
    __is->read(description);
    __is->read(report);
    __is->read(actuser);
    __is->read(confirmtime);
    __is->read(objdesc);
    __is->read(thetimestr);
}

void
modulePDR::__writeAnalogValueSequence(::IceInternal::BasicStream* __os, const ::modulePDR::analogTMeasValue* begin, const ::modulePDR::analogTMeasValue* end)
{
    ::Ice::Int size = static_cast< ::Ice::Int>(end - begin);
    __os->writeSize(size);
    for(int i = 0; i < size; ++i)
    {
        begin[i].__write(__os);
    }
}

void
modulePDR::__readAnalogValueSequence(::IceInternal::BasicStream* __is, ::modulePDR::AnalogValueSequence& v)
{
    ::Ice::Int sz;
    __is->readAndCheckSeqSize(36, sz);
    v.resize(sz);
    for(int i = 0; i < sz; ++i)
    {
        v[i].__read(__is);
    }
}

void
modulePDR::__writeAlarmInfoSequence(::IceInternal::BasicStream* __os, const ::modulePDR::hisalarmInfo* begin, const ::modulePDR::hisalarmInfo* end)
{
    ::Ice::Int size = static_cast< ::Ice::Int>(end - begin);
    __os->writeSize(size);
    for(int i = 0; i < size; ++i)
    {
        begin[i].__write(__os);
    }
}

void
modulePDR::__readAlarmInfoSequence(::IceInternal::BasicStream* __is, ::modulePDR::AlarmInfoSequence& v)
{
    ::Ice::Int sz;
    __is->readAndCheckSeqSize(30, sz);
    v.resize(sz);
    for(int i = 0; i < sz; ++i)
    {
        v[i].__read(__is);
    }
}

bool
IceProxy::modulePDR::PDRcontrol::getplaybackhandler(const ::modulePDR::PDRApplyObj& applyobj, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__modulePDR__PDRcontrol__getplaybackhandler_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::modulePDR::PDRcontrol* __del = dynamic_cast< ::IceDelegate::modulePDR::PDRcontrol*>(__delBase.get());
            return __del->getplaybackhandler(applyobj, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::modulePDR::PDRcontrol::begin_getplaybackhandler(const ::modulePDR::PDRApplyObj& applyobj, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__modulePDR__PDRcontrol__getplaybackhandler_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __modulePDR__PDRcontrol__getplaybackhandler_name, __del, __cookie);
    try
    {
        __result->__prepare(__modulePDR__PDRcontrol__getplaybackhandler_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        applyobj.__write(__os);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::modulePDR::PDRcontrol::end_getplaybackhandler(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __modulePDR__PDRcontrol__getplaybackhandler_name);
    bool __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

void
IceProxy::modulePDR::PDRcontrol::jointheplayback(const ::std::string& clientName, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::modulePDR::PDRcontrol* __del = dynamic_cast< ::IceDelegate::modulePDR::PDRcontrol*>(__delBase.get());
            __del->jointheplayback(clientName, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::modulePDR::PDRcontrol::begin_jointheplayback(const ::std::string& clientName, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __modulePDR__PDRcontrol__jointheplayback_name, __del, __cookie);
    try
    {
        __result->__prepare(__modulePDR__PDRcontrol__jointheplayback_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(clientName);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::modulePDR::PDRcontrol::end_jointheplayback(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __modulePDR__PDRcontrol__jointheplayback_name);
}

void
IceProxy::modulePDR::PDRcontrol::play(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::modulePDR::PDRcontrol* __del = dynamic_cast< ::IceDelegate::modulePDR::PDRcontrol*>(__delBase.get());
            __del->play(__ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::modulePDR::PDRcontrol::begin_play(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __modulePDR__PDRcontrol__play_name, __del, __cookie);
    try
    {
        __result->__prepare(__modulePDR__PDRcontrol__play_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::modulePDR::PDRcontrol::end_play(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __modulePDR__PDRcontrol__play_name);
}

void
IceProxy::modulePDR::PDRcontrol::pause(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::modulePDR::PDRcontrol* __del = dynamic_cast< ::IceDelegate::modulePDR::PDRcontrol*>(__delBase.get());
            __del->pause(__ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::modulePDR::PDRcontrol::begin_pause(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __modulePDR__PDRcontrol__pause_name, __del, __cookie);
    try
    {
        __result->__prepare(__modulePDR__PDRcontrol__pause_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::modulePDR::PDRcontrol::end_pause(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __modulePDR__PDRcontrol__pause_name);
}

void
IceProxy::modulePDR::PDRcontrol::stop(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::modulePDR::PDRcontrol* __del = dynamic_cast< ::IceDelegate::modulePDR::PDRcontrol*>(__delBase.get());
            __del->stop(__ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::modulePDR::PDRcontrol::begin_stop(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __modulePDR__PDRcontrol__stop_name, __del, __cookie);
    try
    {
        __result->__prepare(__modulePDR__PDRcontrol__stop_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::modulePDR::PDRcontrol::end_stop(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __modulePDR__PDRcontrol__stop_name);
}

::Ice::Int
IceProxy::modulePDR::PDRcontrol::PreviousFrame(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__modulePDR__PDRcontrol__PreviousFrame_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::modulePDR::PDRcontrol* __del = dynamic_cast< ::IceDelegate::modulePDR::PDRcontrol*>(__delBase.get());
            return __del->PreviousFrame(__ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::modulePDR::PDRcontrol::begin_PreviousFrame(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__modulePDR__PDRcontrol__PreviousFrame_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __modulePDR__PDRcontrol__PreviousFrame_name, __del, __cookie);
    try
    {
        __result->__prepare(__modulePDR__PDRcontrol__PreviousFrame_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::modulePDR::PDRcontrol::end_PreviousFrame(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __modulePDR__PDRcontrol__PreviousFrame_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Int
IceProxy::modulePDR::PDRcontrol::LatterFrame(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__modulePDR__PDRcontrol__LatterFrame_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::modulePDR::PDRcontrol* __del = dynamic_cast< ::IceDelegate::modulePDR::PDRcontrol*>(__delBase.get());
            return __del->LatterFrame(__ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::modulePDR::PDRcontrol::begin_LatterFrame(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__modulePDR__PDRcontrol__LatterFrame_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __modulePDR__PDRcontrol__LatterFrame_name, __del, __cookie);
    try
    {
        __result->__prepare(__modulePDR__PDRcontrol__LatterFrame_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::modulePDR::PDRcontrol::end_LatterFrame(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __modulePDR__PDRcontrol__LatterFrame_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

void
IceProxy::modulePDR::PDRcontrol::SetFrame(::Ice::Int FrameNum, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::modulePDR::PDRcontrol* __del = dynamic_cast< ::IceDelegate::modulePDR::PDRcontrol*>(__delBase.get());
            __del->SetFrame(FrameNum, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::modulePDR::PDRcontrol::begin_SetFrame(::Ice::Int FrameNum, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __modulePDR__PDRcontrol__SetFrame_name, __del, __cookie);
    try
    {
        __result->__prepare(__modulePDR__PDRcontrol__SetFrame_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(FrameNum);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::modulePDR::PDRcontrol::end_SetFrame(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __modulePDR__PDRcontrol__SetFrame_name);
}

void
IceProxy::modulePDR::PDRcontrol::setplayspeed(::Ice::Int speedNum, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::modulePDR::PDRcontrol* __del = dynamic_cast< ::IceDelegate::modulePDR::PDRcontrol*>(__delBase.get());
            __del->setplayspeed(speedNum, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::modulePDR::PDRcontrol::begin_setplayspeed(::Ice::Int speedNum, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __modulePDR__PDRcontrol__setplayspeed_name, __del, __cookie);
    try
    {
        __result->__prepare(__modulePDR__PDRcontrol__setplayspeed_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(speedNum);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::modulePDR::PDRcontrol::end_setplayspeed(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __modulePDR__PDRcontrol__setplayspeed_name);
}

::Ice::Int
IceProxy::modulePDR::PDRcontrol::getInitstatus(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__modulePDR__PDRcontrol__getInitstatus_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::modulePDR::PDRcontrol* __del = dynamic_cast< ::IceDelegate::modulePDR::PDRcontrol*>(__delBase.get());
            return __del->getInitstatus(__ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::modulePDR::PDRcontrol::begin_getInitstatus(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__modulePDR__PDRcontrol__getInitstatus_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __modulePDR__PDRcontrol__getInitstatus_name, __del, __cookie);
    try
    {
        __result->__prepare(__modulePDR__PDRcontrol__getInitstatus_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::modulePDR::PDRcontrol::end_getInitstatus(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __modulePDR__PDRcontrol__getInitstatus_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Int
IceProxy::modulePDR::PDRcontrol::getplayframe(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__modulePDR__PDRcontrol__getplayframe_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::modulePDR::PDRcontrol* __del = dynamic_cast< ::IceDelegate::modulePDR::PDRcontrol*>(__delBase.get());
            return __del->getplayframe(__ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::modulePDR::PDRcontrol::begin_getplayframe(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__modulePDR__PDRcontrol__getplayframe_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __modulePDR__PDRcontrol__getplayframe_name, __del, __cookie);
    try
    {
        __result->__prepare(__modulePDR__PDRcontrol__getplayframe_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::modulePDR::PDRcontrol::end_getplayframe(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __modulePDR__PDRcontrol__getplayframe_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::std::string
IceProxy::modulePDR::PDRcontrol::getplayingclientlist(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__modulePDR__PDRcontrol__getplayingclientlist_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::modulePDR::PDRcontrol* __del = dynamic_cast< ::IceDelegate::modulePDR::PDRcontrol*>(__delBase.get());
            return __del->getplayingclientlist(__ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::modulePDR::PDRcontrol::begin_getplayingclientlist(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__modulePDR__PDRcontrol__getplayingclientlist_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __modulePDR__PDRcontrol__getplayingclientlist_name, __del, __cookie);
    try
    {
        __result->__prepare(__modulePDR__PDRcontrol__getplayingclientlist_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::modulePDR::PDRcontrol::end_getplayingclientlist(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __modulePDR__PDRcontrol__getplayingclientlist_name);
    ::std::string __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::std::string
IceProxy::modulePDR::PDRcontrol::getplayingequipObj(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__modulePDR__PDRcontrol__getplayingequipObj_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::modulePDR::PDRcontrol* __del = dynamic_cast< ::IceDelegate::modulePDR::PDRcontrol*>(__delBase.get());
            return __del->getplayingequipObj(__ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::modulePDR::PDRcontrol::begin_getplayingequipObj(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__modulePDR__PDRcontrol__getplayingequipObj_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __modulePDR__PDRcontrol__getplayingequipObj_name, __del, __cookie);
    try
    {
        __result->__prepare(__modulePDR__PDRcontrol__getplayingequipObj_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::modulePDR::PDRcontrol::end_getplayingequipObj(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __modulePDR__PDRcontrol__getplayingequipObj_name);
    ::std::string __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::std::string
IceProxy::modulePDR::PDRcontrol::getplayingfaultTime(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__modulePDR__PDRcontrol__getplayingfaultTime_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::modulePDR::PDRcontrol* __del = dynamic_cast< ::IceDelegate::modulePDR::PDRcontrol*>(__delBase.get());
            return __del->getplayingfaultTime(__ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::modulePDR::PDRcontrol::begin_getplayingfaultTime(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__modulePDR__PDRcontrol__getplayingfaultTime_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __modulePDR__PDRcontrol__getplayingfaultTime_name, __del, __cookie);
    try
    {
        __result->__prepare(__modulePDR__PDRcontrol__getplayingfaultTime_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::modulePDR::PDRcontrol::end_getplayingfaultTime(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __modulePDR__PDRcontrol__getplayingfaultTime_name);
    ::std::string __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

void
IceProxy::modulePDR::PDRcontrol::connectCheck(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::modulePDR::PDRcontrol* __del = dynamic_cast< ::IceDelegate::modulePDR::PDRcontrol*>(__delBase.get());
            __del->connectCheck(__ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::modulePDR::PDRcontrol::begin_connectCheck(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __modulePDR__PDRcontrol__connectCheck_name, __del, __cookie);
    try
    {
        __result->__prepare(__modulePDR__PDRcontrol__connectCheck_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::modulePDR::PDRcontrol::end_connectCheck(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __modulePDR__PDRcontrol__connectCheck_name);
}

void
IceProxy::modulePDR::PDRcontrol::getanalogValue(::Ice::Int analogid, ::modulePDR::AnalogValueSequence& analogvalues, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__modulePDR__PDRcontrol__getanalogValue_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::modulePDR::PDRcontrol* __del = dynamic_cast< ::IceDelegate::modulePDR::PDRcontrol*>(__delBase.get());
            __del->getanalogValue(analogid, analogvalues, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::modulePDR::PDRcontrol::begin_getanalogValue(::Ice::Int analogid, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__modulePDR__PDRcontrol__getanalogValue_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __modulePDR__PDRcontrol__getanalogValue_name, __del, __cookie);
    try
    {
        __result->__prepare(__modulePDR__PDRcontrol__getanalogValue_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(analogid);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::modulePDR::PDRcontrol::end_getanalogValue(::modulePDR::AnalogValueSequence& analogvalues, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __modulePDR__PDRcontrol__getanalogValue_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    ::modulePDR::__readAnalogValueSequence(__is, analogvalues);
    __is->endReadEncaps();
}

void
IceProxy::modulePDR::PDRcontrol::getalarminfo(::modulePDR::AlarmInfoSequence& alarminfos, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__modulePDR__PDRcontrol__getalarminfo_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::modulePDR::PDRcontrol* __del = dynamic_cast< ::IceDelegate::modulePDR::PDRcontrol*>(__delBase.get());
            __del->getalarminfo(alarminfos, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::modulePDR::PDRcontrol::begin_getalarminfo(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__modulePDR__PDRcontrol__getalarminfo_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __modulePDR__PDRcontrol__getalarminfo_name, __del, __cookie);
    try
    {
        __result->__prepare(__modulePDR__PDRcontrol__getalarminfo_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::modulePDR::PDRcontrol::end_getalarminfo(::modulePDR::AlarmInfoSequence& alarminfos, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __modulePDR__PDRcontrol__getalarminfo_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    ::modulePDR::__readAlarmInfoSequence(__is, alarminfos);
    __is->endReadEncaps();
}

const ::std::string&
IceProxy::modulePDR::PDRcontrol::ice_staticId()
{
    return ::modulePDR::PDRcontrol::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::modulePDR::PDRcontrol::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::modulePDR::PDRcontrol);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::modulePDR::PDRcontrol::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::modulePDR::PDRcontrol);
}

::IceProxy::Ice::Object*
IceProxy::modulePDR::PDRcontrol::__newInstance() const
{
    return new PDRcontrol;
}

bool
IceDelegateM::modulePDR::PDRcontrol::getplaybackhandler(const ::modulePDR::PDRApplyObj& applyobj, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __modulePDR__PDRcontrol__getplaybackhandler_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        applyobj.__write(__os);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::modulePDR::PDRcontrol::jointheplayback(const ::std::string& clientName, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __modulePDR__PDRcontrol__jointheplayback_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(clientName);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::modulePDR::PDRcontrol::play(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __modulePDR__PDRcontrol__play_name, ::Ice::Normal, __context);
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::modulePDR::PDRcontrol::pause(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __modulePDR__PDRcontrol__pause_name, ::Ice::Normal, __context);
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::modulePDR::PDRcontrol::stop(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __modulePDR__PDRcontrol__stop_name, ::Ice::Normal, __context);
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

::Ice::Int
IceDelegateM::modulePDR::PDRcontrol::PreviousFrame(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __modulePDR__PDRcontrol__PreviousFrame_name, ::Ice::Normal, __context);
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::modulePDR::PDRcontrol::LatterFrame(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __modulePDR__PDRcontrol__LatterFrame_name, ::Ice::Normal, __context);
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::modulePDR::PDRcontrol::SetFrame(::Ice::Int FrameNum, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __modulePDR__PDRcontrol__SetFrame_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(FrameNum);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::modulePDR::PDRcontrol::setplayspeed(::Ice::Int speedNum, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __modulePDR__PDRcontrol__setplayspeed_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(speedNum);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

::Ice::Int
IceDelegateM::modulePDR::PDRcontrol::getInitstatus(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __modulePDR__PDRcontrol__getInitstatus_name, ::Ice::Normal, __context);
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::modulePDR::PDRcontrol::getplayframe(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __modulePDR__PDRcontrol__getplayframe_name, ::Ice::Normal, __context);
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::modulePDR::PDRcontrol::getplayingclientlist(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __modulePDR__PDRcontrol__getplayingclientlist_name, ::Ice::Normal, __context);
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::modulePDR::PDRcontrol::getplayingequipObj(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __modulePDR__PDRcontrol__getplayingequipObj_name, ::Ice::Normal, __context);
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::modulePDR::PDRcontrol::getplayingfaultTime(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __modulePDR__PDRcontrol__getplayingfaultTime_name, ::Ice::Normal, __context);
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::modulePDR::PDRcontrol::connectCheck(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __modulePDR__PDRcontrol__connectCheck_name, ::Ice::Normal, __context);
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::modulePDR::PDRcontrol::getanalogValue(::Ice::Int analogid, ::modulePDR::AnalogValueSequence& analogvalues, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __modulePDR__PDRcontrol__getanalogValue_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(analogid);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        ::modulePDR::__readAnalogValueSequence(__is, analogvalues);
        __is->endReadEncaps();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::modulePDR::PDRcontrol::getalarminfo(::modulePDR::AlarmInfoSequence& alarminfos, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __modulePDR__PDRcontrol__getalarminfo_name, ::Ice::Normal, __context);
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        ::modulePDR::__readAlarmInfoSequence(__is, alarminfos);
        __is->endReadEncaps();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateD::modulePDR::PDRcontrol::getplaybackhandler(const ::modulePDR::PDRApplyObj& applyobj, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::modulePDR::PDRApplyObj& applyobj, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_applyobj(applyobj)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::modulePDR::PDRcontrol* servant = dynamic_cast< ::modulePDR::PDRcontrol*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getplaybackhandler(_m_applyobj, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool& _result;
        const ::modulePDR::PDRApplyObj& _m_applyobj;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __modulePDR__PDRcontrol__getplaybackhandler_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, applyobj, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::modulePDR::PDRcontrol::jointheplayback(const ::std::string& clientName, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& clientName, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_clientName(clientName)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::modulePDR::PDRcontrol* servant = dynamic_cast< ::modulePDR::PDRcontrol*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->jointheplayback(_m_clientName, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::std::string& _m_clientName;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __modulePDR__PDRcontrol__jointheplayback_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(clientName, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::modulePDR::PDRcontrol::play(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::modulePDR::PDRcontrol* servant = dynamic_cast< ::modulePDR::PDRcontrol*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->play(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __modulePDR__PDRcontrol__play_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::modulePDR::PDRcontrol::pause(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::modulePDR::PDRcontrol* servant = dynamic_cast< ::modulePDR::PDRcontrol*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->pause(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __modulePDR__PDRcontrol__pause_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::modulePDR::PDRcontrol::stop(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::modulePDR::PDRcontrol* servant = dynamic_cast< ::modulePDR::PDRcontrol*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->stop(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __modulePDR__PDRcontrol__stop_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::Int
IceDelegateD::modulePDR::PDRcontrol::PreviousFrame(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::modulePDR::PDRcontrol* servant = dynamic_cast< ::modulePDR::PDRcontrol*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->PreviousFrame(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __modulePDR__PDRcontrol__PreviousFrame_name, ::Ice::Normal, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::modulePDR::PDRcontrol::LatterFrame(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::modulePDR::PDRcontrol* servant = dynamic_cast< ::modulePDR::PDRcontrol*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->LatterFrame(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __modulePDR__PDRcontrol__LatterFrame_name, ::Ice::Normal, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::modulePDR::PDRcontrol::SetFrame(::Ice::Int FrameNum, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int FrameNum, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_FrameNum(FrameNum)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::modulePDR::PDRcontrol* servant = dynamic_cast< ::modulePDR::PDRcontrol*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->SetFrame(_m_FrameNum, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int _m_FrameNum;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __modulePDR__PDRcontrol__SetFrame_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(FrameNum, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::modulePDR::PDRcontrol::setplayspeed(::Ice::Int speedNum, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int speedNum, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_speedNum(speedNum)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::modulePDR::PDRcontrol* servant = dynamic_cast< ::modulePDR::PDRcontrol*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->setplayspeed(_m_speedNum, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int _m_speedNum;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __modulePDR__PDRcontrol__setplayspeed_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(speedNum, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::Int
IceDelegateD::modulePDR::PDRcontrol::getInitstatus(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::modulePDR::PDRcontrol* servant = dynamic_cast< ::modulePDR::PDRcontrol*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getInitstatus(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __modulePDR__PDRcontrol__getInitstatus_name, ::Ice::Normal, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::modulePDR::PDRcontrol::getplayframe(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::modulePDR::PDRcontrol* servant = dynamic_cast< ::modulePDR::PDRcontrol*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getplayframe(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __modulePDR__PDRcontrol__getplayframe_name, ::Ice::Normal, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::std::string
IceDelegateD::modulePDR::PDRcontrol::getplayingclientlist(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::modulePDR::PDRcontrol* servant = dynamic_cast< ::modulePDR::PDRcontrol*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getplayingclientlist(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::std::string& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __modulePDR__PDRcontrol__getplayingclientlist_name, ::Ice::Normal, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::std::string
IceDelegateD::modulePDR::PDRcontrol::getplayingequipObj(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::modulePDR::PDRcontrol* servant = dynamic_cast< ::modulePDR::PDRcontrol*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getplayingequipObj(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::std::string& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __modulePDR__PDRcontrol__getplayingequipObj_name, ::Ice::Normal, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::std::string
IceDelegateD::modulePDR::PDRcontrol::getplayingfaultTime(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::modulePDR::PDRcontrol* servant = dynamic_cast< ::modulePDR::PDRcontrol*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getplayingfaultTime(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::std::string& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __modulePDR__PDRcontrol__getplayingfaultTime_name, ::Ice::Normal, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::modulePDR::PDRcontrol::connectCheck(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::modulePDR::PDRcontrol* servant = dynamic_cast< ::modulePDR::PDRcontrol*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->connectCheck(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __modulePDR__PDRcontrol__connectCheck_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::modulePDR::PDRcontrol::getanalogValue(::Ice::Int analogid, ::modulePDR::AnalogValueSequence& analogvalues, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int analogid, ::modulePDR::AnalogValueSequence& analogvalues, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_analogid(analogid),
            _m_analogvalues(analogvalues)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::modulePDR::PDRcontrol* servant = dynamic_cast< ::modulePDR::PDRcontrol*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->getanalogValue(_m_analogid, _m_analogvalues, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int _m_analogid;
        ::modulePDR::AnalogValueSequence& _m_analogvalues;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __modulePDR__PDRcontrol__getanalogValue_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(analogid, analogvalues, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::modulePDR::PDRcontrol::getalarminfo(::modulePDR::AlarmInfoSequence& alarminfos, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::modulePDR::AlarmInfoSequence& alarminfos, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_alarminfos(alarminfos)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::modulePDR::PDRcontrol* servant = dynamic_cast< ::modulePDR::PDRcontrol*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->getalarminfo(_m_alarminfos, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::modulePDR::AlarmInfoSequence& _m_alarminfos;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __modulePDR__PDRcontrol__getalarminfo_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(alarminfos, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::ObjectPtr
modulePDR::PDRcontrol::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

static const ::std::string __modulePDR__PDRcontrol_ids[2] =
{
    "::Ice::Object",
    "::modulePDR::PDRcontrol"
};

bool
modulePDR::PDRcontrol::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__modulePDR__PDRcontrol_ids, __modulePDR__PDRcontrol_ids + 2, _s);
}

::std::vector< ::std::string>
modulePDR::PDRcontrol::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__modulePDR__PDRcontrol_ids[0], &__modulePDR__PDRcontrol_ids[2]);
}

const ::std::string&
modulePDR::PDRcontrol::ice_id(const ::Ice::Current&) const
{
    return __modulePDR__PDRcontrol_ids[1];
}

const ::std::string&
modulePDR::PDRcontrol::ice_staticId()
{
    return __modulePDR__PDRcontrol_ids[1];
}

::Ice::DispatchStatus
modulePDR::PDRcontrol::___getplaybackhandler(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::modulePDR::PDRApplyObj applyobj;
    applyobj.__read(__is);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    bool __ret = getplaybackhandler(applyobj, __current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
modulePDR::PDRcontrol::___jointheplayback(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string clientName;
    __is->read(clientName);
    __is->endReadEncaps();
    jointheplayback(clientName, __current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
modulePDR::PDRcontrol::___play(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.is()->skipEmptyEncaps();
    play(__current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
modulePDR::PDRcontrol::___pause(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.is()->skipEmptyEncaps();
    pause(__current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
modulePDR::PDRcontrol::___stop(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.is()->skipEmptyEncaps();
    stop(__current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
modulePDR::PDRcontrol::___PreviousFrame(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.is()->skipEmptyEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Ice::Int __ret = PreviousFrame(__current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
modulePDR::PDRcontrol::___LatterFrame(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.is()->skipEmptyEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Ice::Int __ret = LatterFrame(__current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
modulePDR::PDRcontrol::___SetFrame(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::Ice::Int FrameNum;
    __is->read(FrameNum);
    __is->endReadEncaps();
    SetFrame(FrameNum, __current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
modulePDR::PDRcontrol::___setplayspeed(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::Ice::Int speedNum;
    __is->read(speedNum);
    __is->endReadEncaps();
    setplayspeed(speedNum, __current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
modulePDR::PDRcontrol::___getInitstatus(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.is()->skipEmptyEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Ice::Int __ret = getInitstatus(__current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
modulePDR::PDRcontrol::___getplayframe(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.is()->skipEmptyEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Ice::Int __ret = getplayframe(__current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
modulePDR::PDRcontrol::___getplayingclientlist(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.is()->skipEmptyEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::std::string __ret = getplayingclientlist(__current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
modulePDR::PDRcontrol::___getplayingequipObj(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.is()->skipEmptyEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::std::string __ret = getplayingequipObj(__current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
modulePDR::PDRcontrol::___getplayingfaultTime(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.is()->skipEmptyEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::std::string __ret = getplayingfaultTime(__current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
modulePDR::PDRcontrol::___connectCheck(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.is()->skipEmptyEncaps();
    connectCheck(__current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
modulePDR::PDRcontrol::___getanalogValue(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::Ice::Int analogid;
    __is->read(analogid);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::modulePDR::AnalogValueSequence analogvalues;
    getanalogValue(analogid, analogvalues, __current);
    if(analogvalues.size() == 0)
    {
        __os->writeSize(0);
    }
    else
    {
        ::modulePDR::__writeAnalogValueSequence(__os, &analogvalues[0], &analogvalues[0] + analogvalues.size());
    }
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
modulePDR::PDRcontrol::___getalarminfo(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.is()->skipEmptyEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::modulePDR::AlarmInfoSequence alarminfos;
    getalarminfo(alarminfos, __current);
    if(alarminfos.size() == 0)
    {
        __os->writeSize(0);
    }
    else
    {
        ::modulePDR::__writeAlarmInfoSequence(__os, &alarminfos[0], &alarminfos[0] + alarminfos.size());
    }
    return ::Ice::DispatchOK;
}

static ::std::string __modulePDR__PDRcontrol_all[] =
{
    "LatterFrame",
    "PreviousFrame",
    "SetFrame",
    "connectCheck",
    "getInitstatus",
    "getalarminfo",
    "getanalogValue",
    "getplaybackhandler",
    "getplayframe",
    "getplayingclientlist",
    "getplayingequipObj",
    "getplayingfaultTime",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "jointheplayback",
    "pause",
    "play",
    "setplayspeed",
    "stop"
};

::Ice::DispatchStatus
modulePDR::PDRcontrol::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< ::std::string*, ::std::string*> r = ::std::equal_range(__modulePDR__PDRcontrol_all, __modulePDR__PDRcontrol_all + 21, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __modulePDR__PDRcontrol_all)
    {
        case 0:
        {
            return ___LatterFrame(in, current);
        }
        case 1:
        {
            return ___PreviousFrame(in, current);
        }
        case 2:
        {
            return ___SetFrame(in, current);
        }
        case 3:
        {
            return ___connectCheck(in, current);
        }
        case 4:
        {
            return ___getInitstatus(in, current);
        }
        case 5:
        {
            return ___getalarminfo(in, current);
        }
        case 6:
        {
            return ___getanalogValue(in, current);
        }
        case 7:
        {
            return ___getplaybackhandler(in, current);
        }
        case 8:
        {
            return ___getplayframe(in, current);
        }
        case 9:
        {
            return ___getplayingclientlist(in, current);
        }
        case 10:
        {
            return ___getplayingequipObj(in, current);
        }
        case 11:
        {
            return ___getplayingfaultTime(in, current);
        }
        case 12:
        {
            return ___ice_id(in, current);
        }
        case 13:
        {
            return ___ice_ids(in, current);
        }
        case 14:
        {
            return ___ice_isA(in, current);
        }
        case 15:
        {
            return ___ice_ping(in, current);
        }
        case 16:
        {
            return ___jointheplayback(in, current);
        }
        case 17:
        {
            return ___pause(in, current);
        }
        case 18:
        {
            return ___play(in, current);
        }
        case 19:
        {
            return ___setplayspeed(in, current);
        }
        case 20:
        {
            return ___stop(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
modulePDR::PDRcontrol::__write(::IceInternal::BasicStream* __os) const
{
    __os->writeTypeId(ice_staticId());
    __os->startWriteSlice();
    __os->endWriteSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__write(__os);
#else
    ::Ice::Object::__write(__os);
#endif
}

void
modulePDR::PDRcontrol::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->readTypeId(myId);
    }
    __is->startReadSlice();
    __is->endReadSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__read(__is, true);
#else
    ::Ice::Object::__read(__is, true);
#endif
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
modulePDR::PDRcontrol::__write(const ::Ice::OutputStreamPtr&) const
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type modulePDR::PDRcontrol was not generated with stream support";
    throw ex;
}

void
modulePDR::PDRcontrol::__read(const ::Ice::InputStreamPtr&, bool)
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type modulePDR::PDRcontrol was not generated with stream support";
    throw ex;
}
#endif

void 
modulePDR::__patch__PDRcontrolPtr(void* __addr, ::Ice::ObjectPtr& v)
{
    ::modulePDR::PDRcontrolPtr* p = static_cast< ::modulePDR::PDRcontrolPtr*>(__addr);
    assert(p);
    *p = ::modulePDR::PDRcontrolPtr::dynamicCast(v);
    if(v && !*p)
    {
        IceInternal::Ex::throwUOE(::modulePDR::PDRcontrol::ice_staticId(), v->ice_id());
    }
}
